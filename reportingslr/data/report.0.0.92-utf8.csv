ID Paper;Title;ID Search Session;Authors;Abstract;Status/Selection;Status/Extraction;Reading Priority;Score;Year;Journal;Keywords;Type;comment;URL;Volume;Pages;DOI;ISSN/ISBN;Importation Date;Columna1;(E) The paper is not written in English;(E) The paper is not related to a Smart Contract language;(E) The paper is a tutorial  or poster summary only.;(E) The paper occurs multiple times in the result set;(E) The paper’s full text is not available for download;(I) Title, keyword list, and abstract make explicit that the paper is related to Smart Contract language.;(E) The paper is published before 1991;(E) It is a patent;(E)The paper is not accesible electronically;Columna2;Name;Paradigm : Imperative;Paradigm : Declarative;Paradigm : Symbolic;Paradigm : Undetermined};Supported by blockchain platform : Yes;Supported by blockchain platform : No};Blockchain name;DSL Type : Standalone;DSL Type : Extension};Focus;Institution name;Insitution origin : Academia;Insitution origin : Industry};Challenges;Use cases;Kind : Implementation;Kind : Specification;Kind : Unknown};
5;ShadowEth: Private Smart Contract on Public Blockchain;0;Yuan, Ruiand Xia, Yu-Binand Chen, Hai-Boand Zang, Bin-Yuand Xie, Jan;Blockchain is becoming popular as a distributed and reliable ledger which allows distrustful parties to transact safely without trusting third parties. Emerging blockchain systems like Ethereum support smart contracts where miners can run arbitrary user-defined programs. However, one of the biggest concerns about the blockchain and the smart contract is privacy, since all the transactions on the chain are exposed to the public. In this paper, we present ShadowEth, a system that leverages hardware enclave to ensure the confidentiality of smart contracts while keeping the integrity and availability based on existing public blockchains like Ethereum. ShadowEth establishes a confidential and secure platform protected by trusted execution environment (TEE) off the public blockchain for the execution and storage of private contracts. It only puts the process of verification on the blockchain. We provide a design of our system including a protocol of the cryptographic communication and verification and show the applicability and feasibility of ShadowEth by various case studies. We implement a prototype using the Intel SGX on the Ethereum network and analyze the security and availability of the system.;ACCEPTED;ACCEPTED;LOW;14;2018;Journal of Computer Science and Technology;;Journal Paper;"- The paper is based on the description of a new bkockchain protocol
- Smart contract language based on ethereum-based smart contract language";https://doi.org/10.1007/s11390-018-1839-y;33;542--556;10.1007/s11390-018-1839-y;1860-4749;07/17/2018;;N;N;N;N;N;Y;N;N;N;;Bounty Contract;Y;N;N;N;Y;N;Ethereum;N;Y;Privacy;Shanghai Jiao Tong University / Cryptape Inc., Hangzhou;Y;N;null;"1 Protecting Simple Vote: We first implement a simple vote example to show the confidentiality of private contracts. The scenario is
that some people want to start a vote between themselves by a smart contract on the Ethereum, but they do not want to expose the content of this vote to the public.

2 Protecting Transaction Details: We consider the following scenario: a seller and a buyer have a contract with a certain price and quantity of some commodity. The key secret of the scenario is the detail of the purchase including the price, the quantity and maybe some promotion strategy in some complicated cases, while the result (i.e., the total ether transferred) which will eventually be reflected on the
Ethereum is not protected.

3 Second-Price Auction: In a second-price auction, the bidder who offers the highest price wins but pays the second highest price. The essential element of second-price auctions is that bidders offer bids without knowing the bid of other bidders.";Y;N;N; 
12;TRiC: Terms, RIghts and Conditions Semantic Descriptors for Smart Contracts;0;Ibañez, Luis-Daniel and Simperl, Elena;Smart Contracts have emerged as a novel way to automate the execution of contracts in a decentralised and secure environment, minimising the risk of breach or non-compliance. However, recent research points out that the same measures that secure Smart Contracts against disruption with the purpose of breach makes altering the terms, rights and conditions of contracts difficult. The same research proposes a set of standards inspired in paper-contract law that Smart Contract platforms should implement to enable Smart Contract Undo and Alteration. This paper is about preliminary work on describing terms, rights, and conditions of Smart Contracts as RDF documents linked to them, levering Semantic Web tools enabling: (i) Definition and checking of complex rights and conditions (ii) Separation of the terms of the contract from its execution logic. (iii) Querying and Updating via SPARQL (iv) Alteration of terms that were not initially considered as modifiable.;ACCEPTED;ACCEPTED;LOW;20;2017;The Semantic Web: ESWC 2017 Satellite Events;Smart Contracts, Semantic Web, Smart Contract update;Conference Paper;It not proposes a smart contract language itself, but an addition of semantics to Smart Contract. Maybe it could be considered as a way of enriching the language.;;;317--326;https://doi.org/10.1007/978-3-319-70407-4_40;978-3-319-70407-4;07/17/2018;;N;N;N;N;N;Y;N;N;N;;TRiC Descriptors;N;Y;N;N;Y;N;null;N;Y;Smart Contract Alteration;University of Southampton;Y;N;"(1) How to integrate a Graph Store into a Smart Contract Platform? Is it relevant for the TRiC descriptor context to execute SPARQL queries in a Smart Contract Platform as if they were code? If so, how to do it?
(2) How to efficiently store TRiC descriptors? Note that our approach implies replacing re-factorisation and re-deployment with data up dates, therefore, optimisation of said up dates in a Distributed Ledger Environments environment is crucial
(3) How to check the validity of alterations made via TRiC descriptors from an execution and legal point of view? The question becomes more challenging in the presence of dep endencies to other contracts.
(4)In our current definition, one TRiC descriptor is associated with one Smart Contract, is it possible to improve the approach to enable the re-use of descriptors (or parts of them) across several contracts?
";Crowdraise (it is more a running example than a use case);N;Y;N; 
26;Tool Demonstration: FSolidM for Designing Secure Ethereum Smart Contracts;0;Mavridou, Anastasiaand Laszka, Aron;Blockchain-based distributed computing platforms enable the trusted execution of computation---defined in the form of smart contracts---without trusted agents. Smart contracts are envisioned to have a variety of applications, ranging from financial to IoT asset tracking. Unfortunately, the development of smart contracts has proven to be extremely error prone. In practice, contracts are riddled with security vulnerabilities comprising a critical issue since bugs are by design non-fixable and contracts may handle financial assets of significant value. To facilitate the development of secure smart contracts, we have created the FSolidM framework, which allows developers to define contracts as finite state machines (FSMs) with rigorous and clear semantics. FSolidM provides an easy-to-use graphical editor for specifying FSMs, a code generator for creating Ethereum smart contracts, and a set of plugins that developers may add to their FSMs to enhance security and functionality.;ACCEPTED;ACCEPTED;VERY_HIGH;20;2018;"International Conference on Principles of Security and Trust
POST 2018: Principles of Security and Trust";Smart contract, Security Finite state machine, Ethereum Solidity,Automatic code generation, Design patterns;Conference paper;"It defines the FSolidM framework, which allows developers to define contracts as finite state machines (FSMs). The FSMs could be thought as a graphical DSL.

Mavridou, A.: Smartcontracts - the FSolidM framework. https://github.com/anmavrid/smart-contracts. Accessed 26 Mar 2018
";https://link.springer.com/chapter/10.1007%2F978-3-319-89722-6_11;;270--277;ttps://doi.org/10.1007/978-3-319-89722-6_11;978-3-319-89722-6;07/17/2018;;N;N;N;N;N;Y;N;N;N;;FSolidM;Y;N;N;N;Y;N;Ethereum;Y;N;Security;"Vanderbilt University, Nashville, USA
University of Houston, Houston, USA";Y;N;(1) We plan to integrate model checkers and compositional verification tools into our framework to enable the verification of security and safety properties.;Blind auction (example, not use case);N;Y;N; 
41;Automated Execution of Financial Contracts on Blockchains;0;Egelund-Müller, Benjaminand Elsman, Martinand Henglein, Fritzand Ross, Omri;"The paper investigates financial contract management on distributed ledgers and provides a working solution implemented on the Ethereum blockchain. The system is based on a domain-specific language for financial contracts that is capable of expressing complex multi-party derivatives and is conducive to automated execution. The authors propose an architecture for separating contractual terms from contract execution: a contract evaluator encapsulates the syntax and semantics of financial contracts without actively performing contractual actions; such actions are handled by user-definable contract managers that administer strategies for the execution of contracts. Hosting contracts and contract managers on a distributed ledger, side-by-side with digital assets, facilitates automated settlement of commitments without the need for an intermediary. The paper discusses how the proposed technology may change the way financial institutions, regulators, and individuals interact in a financial system based on distributed ledgers.";ACCEPTED;ACCEPTED;HIGH;3;2017;Business & Information Systems Engineering;"Blockchain; Domain specific language; Financial services; Distributed ledger ";Journal Paper;"The system is based on a domain-specific language for financial contracts that is capable of expressing complex multi-party derivatives and is conducive to automated execution.

Proposes a DSL for financial contracts.

Check reference: Bahr P, Berthold J, Elsman M (2015) Certified symbolic management of financial multi-party contracts. In: Proceedings of the 20th ACM SIGPLAN international conference on functional programming, ACM. pp 315–327";https://doi.org/10.1007/s12599-017-0507-z;59;457--467;10.1007/s12599-017-0507-z;1867-0202;07/17/2018;;N;N;N;N;N;Y;N;N;N;;null;Y;N;N;N;Y;N;null;N;Y;Financial Contract;Department of Computer Science, University of Copenhagen,;Y;N;"(1) First, the current implementation still has a rich roadmap, including the development of a varied sample portfolio with an accompanying test suite, implementation of a proper contract language parser (it currently requires users to input the abstract syntax tree of a contract), improvements in the handling and communication of errors,
verification of the implementation, and if it is to ever leave
the comforts of a test-net, significant performance tuning.

(2) Second, the architecture presented in Sect. 3, upon which the implementation is based, is an obvious candidate for further refinements. Amongst possible pursuits is an investigation into a push-based model for feeds (which would guarantee proper timestamping of events), models for how to transfer a party’s rights and obligations for a contract to a third party (e.g., by inferring which parties
would be affected by the transfer and only require these parties’ approval), a way to easily reverse contract evaluation as well as actions induced by it (e.g., for reversing transfers caused by corrupted feeds), and the implementation of prototypes on other ledgers than Ethereum, which could prove or disprove the general applicability of the
model.

(3) Third, the architecture presented in this paper places all the central pieces on the ledger. However, we do not discount the possibility that better models exist. We view two other models particularly as worthy of investigation. The first is a certificate approach in which contracts are stored, evaluated, and settled off-ledger and consistency is ensured through certificates that are verified through the ledger. The second is a compile-to-specialized approach in which contract, evaluator and manager are compiled off-ledger to a specialized and high-performance smart contract, which
is then launched on the ledger. This could be done by verified software that is regulated and guaranteed by authorities.

(3) Fourth, a different kind of pursuit would be to investigate new kinds of contract managers and the extent to which they can automatically do tasks that are currently manually or centrally maintained.

(4) from a legal standpoint, the ideas presented in this paper would require a robust legal framework that clearly explains both the legal meaning of the contract language constructors and reduction rules, as well as the legal concessions granted to any given contract manager

(5) Finally, we want to mention the opportunities that arise
from placing an entire financial system on a single ledger.

Extensive analysis of legal implications.";"Examples (not use cases)
(1) FX American option contract
(2) FX up-and-in barrier option contract
(3) Credit default swap contract
(4) Replacing a previous contract with a new one";N;Y;N; 
63;Recent Developments in Blockchain;0;Dhillon, Vikramand Metcalf, Davidand Hooper, Max;"In this chapter, we focus on three new technologies that have significantly advanced our understanding of
blockchain-enabled applications and opened up several new avenues for research. We begin our discussion
with EOS, an Ethereum competitor built with an OS inspired architecture and platform-support design
philosophy. It uses a new consensus mechanism called delegated proof-of-stake to enable rapid transaction
verification and a continuous cycle of voting for delegates that support the network. The message passing
protocols implemented in EOS are very advanced, allowing automated response handlers and action
triggers on message delivery. They make up most of the smart contract system. There is also support for
parallel lockless execution of smart contract instructions across the network, massively reducing latency in
communication and state updates.
The second technology we present is a contract-oriented programming language called Chain-core. On
the Chain network, all value is concentrated within assets that can be issued and controlled by users. Chain
provides developers with a very powerful API to manage and transfer assets in the blockchain. In a similar
regard to Aragon, Chain provides a visual interface to manage assets on a blockchain. We do a walkthrough
of Chain’s graphical interface, covering all the basic features available for asset management. Chain recently
announced a new development language to simplify the work of writing contracts for assets called Ivy
Playground, and we end the section by talking about the new updates in Ivy.
The final technology that we talk about is Quorum, an enterprise-grade fork of Ethereum built by
the Ethereum Enterprise Alliance (EEA) to handle high-volume requirements of businesses using the
blockchain. It features numerous upgrades, such as a public–private split on the blockchain (to allow
completely private transactions), private smart contracts, and the QuorumChain consensus mechanism.
In addition, zero-knowledge proofs will be coming to Quorum in the near future. We end this section with
an overview of Quorum given by JPMorgan and EEA.";ACCEPTED;ACCEPTED;LOW;6;2017;Blockchain Enabled Applications: Understand the Blockchain Ecosystem and How to Make it Work for You;;Book Chapter;"The second technology we present is a contract-oriented programming language called Chain-core. 

Part of the chapter is focused on a contract-oriented programming language";https://doi.org/10.1007/978-1-4842-3081-7_11;;151--181;10.1007/978-1-4842-3081-7_11;978-1-4842-3081-7;07/17/2018;;N;N;N;N;N;Y;N;N;N;;Chain Core;Y;N;N;N;Y;N;Chain;Y;N;Security,safety;Chain;N;Y;null;null;Y;N;N; 
73;eContractual choreography-language properties towards cross-organizational business collaboration;0;Norta, Alexand Ma, Lixinand Duan, Yucongand Rull, Addiand K{\~o}lvart, Meritand Taveter, Kuldar;Meaningfully automating sociotechnical business collaboration promises efficiency-, effectiveness-, and quality increases for realizing next-generation decentralized autonomous organizations. For automating business-process aware cross-organizational operations, the development of existing choreography languages is technology driven and focuses less on sociotechnical suitability and expressiveness concepts and properties that recognize the interaction between people in organizations and technology in workplaces. This gap our suitability- and expressiveness exploration fills by means of a cross-organizational collaboration ontology that we map as a proof-of-concept evaluation to the eSourcing Markup Language (eSML). The latter we test in a feasibility case study to meaningfully support the automation of business collaboration. The developed eSourcing ontology and eSML is replicable for exploring strengths and weaknesses of other choreography languages.;ACCEPTED;ACCEPTED;HIGH;14;2015;Journal of Internet Services and Applications;"Smart contracting
Choreography
eSourcing
Suitability
Expressiveness
Cross-organizational
B2B
Business process
Sociotechnical
Decentralized autonomous organization";Journal Paper;"It defines the eSourcing Markup Languge (eSML)
";https://doi.org/10.1186/s13174-015-0023-7;6;8;10.1186/s13174-015-0023-7;1869-0238;07/17/2018;;N;N;N;N;N;Y;N;N;N;;eSourcing Markup Language (eSML);Y;N;N;N;Y;N;"n/a
It is not executed on any blockchain.";Y;N;business process collaboration;Tallinn University of Technology, Akadeemia Tee 15A, 12618 Tallinn, Estonia;Y;N;"(1) we plan to further enhance the eSourcing ontology with law researchers towards providing a mature ontology for advancing smart-contracting.
(2) we plan to carry out more case studies with eSML in research projects about designing cyberphysical systems with smart-object orchestration
(3) an important extension for the eSourcing ontology and eSML is an adoption of concepts and properties to cater for adopting advanced security assurance measures that are relevant for open cyber-physical systems collaborations
(4) open research issue is the safeguarding of business collaborations with transactionality concepts that need to go further than traditional
transactions from the database-and workflow domains, i.e.,pertaining to blockchain-related variants such as sidechains,treechains,minichains,and so on.Thus, future work will explore such electronic business transactions with the objective of understanding how to extend eSMLfor ensuring a safeguarding of cyber-physical system collaborations,preferably by using blockchain technology";"business case from the automobile industry. 
";N;Y;N; 
105;Distributed Electronic Rights in JavaScript;0;Miller, Mark S.and Van Cutsem, Tomand Tulloh, Bill;Contracts enable mutually suspicious parties to cooperate safely through the exchange of rights. Smart contracts are programs whose behavior enforces the terms of the contract. This paper shows how such contracts can be specified elegantly and executed safely, given an appropriate distributed, secure, persistent, and ubiquitous computational fabric. JavaScript provides the ubiquity but must be significantly extended to deal with the other aspects. The first part of this paper is a progress report on our efforts to turn JavaScript into this fabric. To demonstrate the suitability of this design, we describe an escrow exchange contract implemented in 42 lines of JavaScript code.;ACCEPTED;ACCEPTED;LOW;3;2013;"European Symposium on Programming
ESOP 2013: Programming Languages and Systems ";"security; distributed objects; object-capabilities; smart contracts ";Conference paper;"It is not a smart-contract language itself, but a Javascript extension to implement smart contracts.

- Dr. SES is a platform for distributed, resilient, and secure computing, layered on JavaScript.
- Dr. SES builds on the Q library to extend the JavaScript ";https://link.springer.com/chapter/10.1007/978-3-642-37036-6_1;7792;1--20;https://doi.org/10.1007/978-3-642-37036-6_1;978-3-642-37036-6;07/17/2018;;N;N;N;N;N;Y;N;N;N;;Dr. SES;Y;N;N;N;N;Y;null;N;Y;Security;Google Inc.;N;Y;null;"* Escrow Exchange Contract
";Y;N;N; 
2231;Writing Safe Smart Contracts in Flint;4;Schrans, Franklin and Eisenbach, Susan and Drossopoulou, Sophia;Blockchain-based platforms such as Ethereum support the execution of versatile decentralized applications, known as smart contracts. These typically hold and transfer digital currency (e.g., Ether) to other parties on the platform. Contracts have been subject to numerous attacks, losing hundreds of millions of dollars (in Ether). We propose Flint, a new type-safe, capabilities-secure, contract-oriented programming language specifically designed for writing robust smart contracts. To help programmers reason about access control of functions, Flint programmers use caller capabilities. To prevent vulnerabilities relating to the unintentional loss of currency, transfers of assets in Flint are performed through safe atomic operations, inspired by linear type theory.;ACCEPTED;ACCEPTED;LOW;9;2018;Conference Companion of the 2nd International Conference on Art, Science, and Engineering of Programming;Ethereum, Programming Language, Smart Contracts;Conference paper;Languagel reference: https://docs.flintlang.org/;http://doi.acm.org/10.1145/3191697.3213790;;218--219;10.1145/3191697.3213790;978-1-4503-5513-1;07/19/2018;;N;N;N;N;N;Y;N;N;N;;Flint;Y;N;N;N;Y;N;Ethereum;Y;N;Security;Imperial College London;Y;N;null;FlightManager contract (example);Y;N;N; 
2248;Hawk: The Blockchain Model of Cryptography and Privacy-Preserving Smart Contracts;5;A. Kosba and A. Miller and E. Shi and Z. Wen and C. Papamanthou;Emerging smart contract systems over decentralized cryptocurrencies allow mutually distrustful parties to transact safely without trusted third parties. In the event of contractual breaches or aborts, the decentralized blockchain ensures that honest parties obtain commensurate compensation. Existing systems, however, lack transactional privacy. All transactions, including flow of money between pseudonyms and amount transacted, are exposed on the blockchain. We present Hawk, a decentralized smart contract system that does not store financial transactions in the clear on the blockchain, thus retaining transactional privacy from the public's view. A Hawk programmer can write a private smart contract in an intuitive manner without having to implement cryptography, and our compiler automatically generates an efficient cryptographic protocol where contractual parties interact with the blockchain, using cryptographic primitives such as zero-knowledge proofs. To formally define and reason about the security of our protocols, we are the first to formalize the blockchain model of cryptography. The formal modeling is of independent interest. We advocate the community to adopt such a formal model when designing applications atop decentralized blockchains.;ACCEPTED;ACCEPTED;HIGH;18;2016;2016 IEEE Symposium on Security and Privacy (SP);"contracts;cryptographic protocols;data privacy;electronic money;program compilers;transaction processing;trusted computing;Hawk programmer;aborts;automatic cryptographic protocol generation;blockchain model;compiler;contractual breach;decentralized blockchain;decentralized cryptocurrencies;decentralized smart contract system;financial transactions;formal modeling;honest parties;money flow;mutually distrustful parties;privacy-preserving smart contracts;transactional privacy;zero-knowledge proofs;Contracts;Cryptographic protocols;Cryptography;Online banking;Privacy";Conference Paper;"It proposes Hawk, a framework, but also has a compiler. The aim is to avoid users to be worried about cryptography, so the compiler generates a cryphtographic protocol

 A Hawk programmer can write a private smart contract in an intuitive manner without having to implement cryptography, and our compiler automatically generates an efficient cryptographic protocol where contractual parties interact with the blockchain, using cryptographic primitives such as zero-knowledge proofs.";;;839-858;10.1109/SP.2016.55;2375-1207;07/19/2018;;N;N;N;N;N;Y;N;N;N;;"Hawk	";Y;N;N;N;Y;N;"Ethereum - Public contract (Serpent code)
C Compatible - Private contract ";N;Y;Privacy;University of Maryland and Cornell University;Y;N;null;"* Sealed Auction
* rock, paper, scissors
* crowdfunding application
* swap financial instrument";Y;N;N; 
2250;SPESC: A Specification Language for Smart Contracts;5;X. He and B. Qin and Y. Zhu and X. Chen and Y. Liu;The smart contract is an interdisciplinary concept that concerns business, finance, contract law and information technology. Designing and developing a smart contract may require the close cooperation of many experts coming from different fields. How to support such collaborative development is a challenging problem in blockchain-oriented software engineering. This paper proposes SPESC, a specification language for smart contracts, which can define the specification of a smart contract for the purpose of collaborative design. SPESC can specify a smart contract in a similar form to real-world contracts using a natural-language-like grammar, in which the obligations and rights of parties and the transaction rules of cryptocurrencies are clearly defined. The preliminary study results demonstrated that SPESC can be easily learned and understood by both IT and non-IT users and thus has greater potential to facilitate collaborative smart contract development.;ACCEPTED;ACCEPTED;VERY_HIGH;38;2018;2018 IEEE 42nd Annual Computer Software and Applications Conference (COMPSAC);"Collaboration;Contract law;Contracts;Cryptography;Software;Syntactics;blockchain;smart contract;specification language";Conference Paper;"- SPESC is to establish an abstraction layer atop concrete implementations of smart contracts to facilitate the collaboration among experts from different domains
-  Purchase contract to illustrate SPESC";https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8377649;01;132-137;10.1109/COMPSAC.2018.00025;0730-3157;07/19/2018;;N;N;N;N;N;Y;N;N;N;;SPECS;Y;N;N;N;N;Y;n/a;Y;N;Smart Contract Collaborative Development;University of Science and Technology Beijing / Fuzhou University / National Computer Network Emergency Response Technical Team;Y;N;"* this study mainly suffers from a threat to external validity that the participants and the smart contracts used in
this study may not represent real practitioners and smart
contract systems. In the future, we will repeat this study in
a real industrial context. 
* enhance the expressive power and the grammar of SPESC. 
* develop a code generator and build a complete development environment
to facilitate smart contract development. 
* More case studies will be conducted to evaluate the expressive power, userfriendliness, learnability and understandability of SPESC, and the extent to which SPESC contributes to interdisciplinary cooperation in an industrial context";"* Lending 
* Voting
(Two use cases given to users of different types).";N;Y;N; 
2304;Formal Verification of Smart Contracts Based on Users and Blockchain Behaviors Models;6;T. Abdellatif and K. L. Brousmiche;Blockchain technology has attracted increasing attention in recent years. One reason of this new trend is the introduction of on-chain smart contracts enabling the implementation of decentralized applications in trust-less environments. Along with its adoption, attacks exploiting smart contract vulnerabilities are inevitably growing. To counter these attacks and avoid breaches, several approaches have been explored such as documenting vulnerabilities or model checking using formal verification. However, these approaches fail to capture the Blockchain and users behavior properties. In this paper, we propose a novel formal modeling approach to verify a smart contract behavior in its execution environment. We apply this formalism on a concrete smart contract example and analyze its breaches with a statical model checking approach.;ACCEPTED;ACCEPTED;LOW;23;2018;2018 9th IFIP International Conference on New Technologies, Mobility and Security (NTMS);"contracts;formal verification;security of data;statistical analysis;Blockchain technology;blockchain behaviors models;execution environment;formal verification;formalism;novel formal modeling approach;on-chain smart contracts;smart contract behavior;smart contract vulnerabilities;statical model checking approach;trust-less environments;Connectors;Contracts;Model checking;Peer-to-peer computing;Registers;Switches";Conference Paper;"Vulnerabilities; propose a formal modelling approach; It can be considered A graphical DSL, so I'll add it

DSL based on BIP framework for verification of smart contracts";https://ieeexplore.ieee.org/document/8328737;;1-5;10.1109/NTMS.2018.8328737;2157-4960;07/19/2018;;N;N;N;N;N;Y;N;N;N;;BIP Framework;Y;N;N;N;Y;N;null;Y;N;Verification;"IRT SystemX, Paris-Saclay, France 
EDF R&D, Paris-Saclay, France";Y;N;"Our first perspective is to go further in the modeling
and the analysis of blockchain properties such as the number
of miners, the consensus protocol, gaz spending or timing
constraints.

Another perspective is the automated generation of scenarios based on the formal models to detect critical sequence of actions.";*NAME REGISTER SMART CONTRACT;N;Y;N; 
2355;Obsidian: A Safer Blockchain Programming Language;6;M. Coblenz;Blockchain platforms, such as Ethereum, promise to facilitate transactions on a decentralized computing platform among parties that have not established trust. Recognition of the unique challenges of blockchain programming has inspired developers to create domain-specific languages, such as Solidity, for programming blockchain systems. Unfortunately, bugs in Solidity programs have recently been exploited to steal money. We propose a new programming language, Obsidian, to make it easier for programmers to write correct programs.;ACCEPTED;ACCEPTED;LOW;21;2017; IEEE/ACM 39th International Conference on Software Engineering Companion (ICSE-C);blockchain programming, blockchain security, programming language usability;Conference Paper;"https://mcoblenz.github.io/Obsidian/

Obsidian (now in a prototyping phase) is an object-oriented language that makes state first-class ";https://ieeexplore.ieee.org/document/7965268;;97-99;10.1109/ICSE-C.2017.150;;07/19/2018;;N;N;N;N;N;Y;N;N;N;;Obsidian;Y;N;N;N;Y;N;Hyperledger;Y;N;Security;Carnegie Mellon University;Y;N;"(1)We will also conduct user studies to evaluate whether (a) programmers can use Obsidian effectively to write programs with little training; (b) programmers are more likely to write correct, safe code with Obsidian than they are with Solidity. In our user studies, we will ask users to complete programming tasks, assigning some users to Obsidian and some to Solidity, and observe completion rates, completion times, and types and rates of bugs created.";Rock, Paper, Scissors;Y;N;N; 
2385;Smart Contract Negotiation in Cloud Computing;6;V. Scoca and R. B. Uriarte and R. D. Nicola;A smart contract is the formalisation of an agreement, whose terms are automatically enforced by relying on a transaction protocol, while minimising the need of intermediaries. Such contracts not only specify the service and its quality but also the possible changes at runtime of the terms of agreement. Although smart contracts provide a great deal of flexibility, analysing their compatibility and reaching agreements with this level of dynamism is considerably more challenging, due to the freedom of clients and providers in formulating needs/offers. We introduce a formal language to specify interactions between offers and requests and present a methodology for the autonomous negotiation of smart contracts, which analyses the cost and the necessary changes for reaching an agreement. Moreover, we describe a set of experiments that provides insights on the relative cost of dynamism in negotiating smart contracts and compare the request/offer matching rates of our solution with related works.;ACCEPTED;ACCEPTED;LOW;28;2017;IEEE 10th International Conference on Cloud Computing (CLOUD);;Conference Paper;" We introduce a formal language to specify interactions between offers and requests and present a methodology for the autonomous negotiation of smart contracts, which analyses the cost and the necessary changes for reaching an agreement.

Aunque parece que no es el foco del artículo, también presentan un lenguaje formal. Lo que no tengo claro es si ese lenguaje formal es para describir Smart-Contracts. Lo acepto y lo dejo pendiente de contrastar";;;592-599;10.1109/CLOUD.2017.81;2159-6190;07/19/2018;;N;N;N;N;N;Y;N;N;N;;dSLAC;Y;N;N;N;Y;N;null;Y;N;Smart Contract Negotiation;IMT School for Advanced Studies Lucca, Italy;Y;N;"* we plan to analyse the scalability of our approach and develop a solution for the autonomous configuration of the negotiation parameters, which are currently defined manually by the negotiators. 
* look for methods for reducing the generated automata and for new verification modules different from the current one which is solely based on brute force. For this optimisation we could employ genetic
algorithms or the so-called Pareto Front, which explores only
solutions that improve the utility functions of both partners.
";null;N;Y;N; 
9423;Quantitative analysis of smart contracts;10;Chatterjee, K. and Goharshady, A.K. and Velner, Y.;"Smart contracts are computer programs that are executed by a network of mutually distrusting agents, without the need of an external trusted authority. Smart contracts handle and transfer assets of considerable value (in the form of crypto-currency like Bitcoin). Hence, it is crucial that their implementation is bug-free. We identify the utility (or expected payoff) of interacting with such smart contracts as the basic and canonical quantitative property for such contracts. We present a framework for such quantitative analysis of smart contracts. Such a formal framework poses new and novel research challenges in programming languages, as it requires modeling of game-theoretic aspects to analyze incentives for deviation from honest behavior and modeling utilities which are not specified as standard temporal properties such as safety and termination. While game-theoretic incentives have been analyzed in the security community, their analysis has been restricted to the very special case of stateless games. However, to analyze smart contracts, stateful analysis is required as it must account for the different program states of the protocol. Our main contributions are as follows: we present (i) a simplified programming language for smart contracts; (ii) an automatic translation of the programs to state-based games; (iii) an abstraction-refinement approach to solve such games; and (iv) experimental results on real-world-inspired smart contracts.";ACCEPTED;ACCEPTED;LOW;36;2018;"European Symposium on Programming ESOP 2018: Programming Languages and Systems
Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)";"Electronic money;  Game theory;  Modeling languages, Abstraction refinement;  Automatic translation;  Formal framework;  Research challenges;  Security community;  Smart contracts;  Temporal property;  Trusted authorities, Program translators";Conference Paper;" we present (i) a simplified programming language for smart contracts; (ii) an automatic translation of the programs to state-based games

Aunque no es el foco del paper, parece que sí definen un lenguaje como parte de su contrubución";https://www.scopus.com/inward/record.uri?eid=2-s2.0-85045674762&doi=10.1007%2f978-3-319-89884-1_26&partnerID=40&md5=76992f4532a65a1263115ef879a68761;10801 LNCS;739-767;10.1007/978-3-319-89884-1_26;9783319898834;07/21/2018;;N;N;N;N;N;N;N;N;N;;null;Y;N;N;N;Y;N;Ethereum;Y;N;"Concurrent interactions
";"IST Austria (Institute of Science and Technology Austria)
Hebrew University of Jerusalem";Y;N;"(1) we present interval-based abstraction techniques for s uch
games, and whether different abstraction techniques can lead to more s calability or other classes of contracts is an interesting d irection of future work. 
(2) since we consider worst-case guarantees, the games we obtain are two-player zero-sum games. The extension to study multiplayer games and compute values for rational agents is another interesting direction of future work.
(3)work we do not consider interaction between smart contracts, and an extension to encompass such study will be a subject of its own.";"Rock-Paper-Scissors
Auction
Three-Way Lottery
Token Sale
Token Transfer";Y;N;N; 
9436;Simplicity: A new language for blockchains;10;O'Connor, R.;"Simplicity is a typed, combinator-based, functional language without loops and recursion, designed to be used for crypto-currencies and blockchain applications. It aims to improve upon existing crypto-currency languages, such as Bitcoin Script and Ethereum's EVM, while avoiding some of the problems they face. Simplicity comes with formal denotational semantics defined in Coq, a popular, general purpose software proof assistant. Simplicity also includes operational semantics that are defined with an abstract machine that we call the Bit Machine. The Bit Machine is used as a tool for measuring the computational space and time resources needed to evaluate Simplicity programs. Owing to its Turing incompleteness, Simplicity is amenable to static analysis that can be used to derive upper bounds on the computational resources needed, prior to execution. While Turing incomplete, Simplicity can express any finitary function, which we believe is enough to build useful ""smart contracts"" for blockchain applications. 2017 Association for Computing Machinery.";ACCEPTED;ACCEPTED;LOW;18;2017;PLAS 2017 - Proceedings of the 2017 Workshop on Programming Languages and Analysis for Security, co-located with CCS 2017;"Blockchain;  Electronic money;  Semantics;  Theorem proving, Abstract machines;  Computational resources;  Formal denotational semantics;  Functional languages;  General purpose software;  Operational semantics;  Proof assistant;  Smart contracts, Static analysis";Conference Paper;;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85043361529&doi=10.1145%2f3139337.3139340&partnerID=40&md5=f2657232e134090f18cbe620df332ef9;2017-January;107-120;10.1145/3139337.3139340;9781450350990;07/21/2018;;N;N;N;N;N;Y;N;N;N;;Simplicity;N;Y;N;N;Y;N;Bitcoin (see https://bitcoinist.com/simplicity-bitcoin-smart-contracts/);Y;N;Safety;"Blockstream, Montréal, PQ, Canada
";N;Y;(*) Simplicity is designed as a low-level language interpreted by blockchain software. We anticipate higher-level languages will be used for development and compiled to Simplicity. Ivy [10] and the ?-State Authentication Language [11], are existing efforts that may be suitable for being compiled to Simplicity.;null;Y;N;N; 
9449;Findel: Secure derivative contracts for ethereum;10;Biryukov, A. and Khovratovich, D. and Tikhomirov, S.;Blockchain-based smart contracts are considered a promising technology for handling financial agreements securely. In order to realize this vision, we need a formal language to unambiguously describe contract clauses. We introduce Findel â€“ a purely declarative financial domain-specific language (DSL) well suited for implementation in blockchain networks. We implement an Ethereum smart contract that acts as a marketplace for Findel contracts and measure the cost of its operation. We analyze challenges in modeling financial agreements in decentralized networks and outline directions for future work (See the authorâ€™s post-print at https://orbilu.uni.lu/handle/10993/30975 and the related source code at https://github.com/cryptolu/findel). ;ACCEPTED;ACCEPTED;LOW;20;2017;"International Conference on Financial Cryptography and Data Security
FC 2017: Financial Cryptography and Data Security";"Chromium compounds;  Computer programming languages;  Cryptography;  Electronic money;  Formal languages;  HTTP;  Problem oriented languages;  Thallium compounds, Block-chain;  Contract clause;  Decentralized networks;  Domain specific languages;  Financial domains;  Financial engineering;  Source codes, Finance";Conference Paper;"It describes a DSL.
Finantial derivative - is a contract defined in terms of other contracts-
Author post-print_:https://orbilu.uni.lu/handle/10993/30975";https://www.scopus.com/inward/record.uri?eid=2-s2.0-85035143472&doi=10.1007%2f978-3-319-70278-0_28&partnerID=40&md5=2757de2d38e6de4b30f42c7a9e864812;10323 LNCS;453-467;10.1007/978-3-319-70278-0_28;9783319702773;07/21/2018;;N;N;N;N;N;Y;N;N;N;;Findel;N;Y;N;N;Y;N;"Creo que findel es network agnostic. Lo dice en esta frase del paper""The Findel DSL is network-agnostic and can be implemented on top of any
blockchain with sufficient programming capabilities.""
Lo que ocurre es que han hecho una implementación para Ethereum, pero podría usarse cualquier otro";Y;N;Financial contract;University of Luxembourg;Y;N;"(1) Enforcement.
(2) Defaulting on debt
(3) Modelling balances with Tokens
(4) Multi-party contracts
(5) Local client

Limitations of the implementation platform (Ethereum)
(1) Lack of precise clock
(2) Imperative paradigm
(3) Underdeveloped type system

forthcoming challenges: from fundamental limitations of the blockchain network architecture to imperfect development environment";null;N;Y;N; 
9454;From institutions to code: Towards automated generation of smart contracts;10;Frantz, C.K. and Nowostawski, M.;Blockchain technology has emerged as a solution to consistency problems in peer to peer networks. By now, it has matured as a solution to a range of use cases in which it can effectively provide the notion of third party trust without the need for a trusted (physical) third party, which makes it an attractive coordination mechanism for distributed systems. To promote the wide adoption of this technology, we yet lack mechanisms that make the specification and interpretation of smart contracts accessible to a broader audience. In this work, we propose a modeling approach that supports the semi-Automated translation of human-readable contract representations into computational equivalents in order to enable the codification of laws into verifiable and enforceable computational structures that reside within a public blockchain. We identify smart contract components that correspond to real world institutions, and propose a mapping that we operationalize using a domain-specific language in order to support the contract modeling process. We explore this capability based on selected examples and plot out directions for future research on smart contracts. Â© 2016 IEEE.;ACCEPTED;ACCEPTED;LOW;25;2016;Proceedings - IEEE 1st International Workshops on Foundations and Applications of Self-Systems, FAS-W 2016;"Automation;  Computer programming languages;  Distributed computer systems;  Modeling languages;  Problem oriented languages;  Societies and institutions, Autonomy;  Bitcoin;  Block-chain;  Code Generation;  Domain specific languages;  Ethereum;  Institutional grammar;  Model driven development;  Public ledger;  Solidity, Peer to peer networks";Workshop Paper;;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85011029534&doi=10.1109%2fFAS-W.2016.53&partnerID=40&md5=b1fadf47b5407c04220a6f42ed181345;;210-215;10.1109/FAS-W.2016.53;9781509036516;07/21/2018;;N;N;N;N;N;Y;N;N;N;;ADICO-Solidity;Y;N;N;N;Y;N;Ethereum;N;Y;Smart contract generation;"Otago Polytechnic Dunedin
Norwegian University of Science and Technology";Y;N;"Modelling the coordination of independent entities is an essential challenge in the context of collective adaptive and self-organising systems.

is it possible for humans or autonomous entities to verify the actual contractual semantics and obligations? 

Is it possible to generate ADICO-like institutional statements based
on the EVM machine code alone, without the availability
of a high-level language such as Solidity?";"* Voting with Result Notification
* Escrow Service";N;Y;N; 
9465;Towards a shared ledger business collaboration language based on data-aware processes;10;Hull, R. and Batra, V.S. and Chen, Y.-M. and Deutsch, A. and Heath, F.F.T., III and Vianu, V.;Shared ledger technologies, as exemplified by Blockchain, provide a new framework for supporting business collaborations that is based on having a high-reliability, shared, trusted, privacy-preserving, nonrepudiable data repository that includes programmable logic in the form of â€œsmart contractsâ€?. The framework has the potential to dramatically transform business collaboration across numerous industry sectors, including finance, supply chain, food production, pharmaceuticals, and healthcare. Widespread adoption of this technology will be accelerated by the development of business-level languages for specifying smart contracts. This paper proposes that data-aware business processes, and in particular the Business Artifact paradigm, can provide a robust basis for a shared ledger Business Collaboration Language (BCL). The fundamental rationale for adopting data-aware processes is that shared ledgers focus on both data and process in equal measure. The paper examines potential advantages of the artifact-based approach from two perspectives: conceptual modeling, and opportunities for formal reasoning (verification). Broad research challenges for the development, understanding, and usage of a shared ledger BCL are highlighted. Â© Springer International Publishing Switzerland 2016.;ACCEPTED;ACCEPTED;LOW;17;2016;"
International Conference on Service-Oriented Computing
ICSOC 2016: Service-Oriented Computing
Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)";"Linear Temporal Logic; Business Process Management; Component Order; Service Invocation; Linear Temporal; Logic Formula";Conference Paper;"This paper proposes that data-aware business processes, and in particular the Business Artifact paradigm, can provide a robust basis for a shared ledger Business Collaboration Language (BCL).
It proposes a Language.";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84989352630&doi=10.1007%2f978-3-319-46295-0_2&partnerID=40&md5=e65b8abd94ff8c3be8b89efa70a992a4;9936 LNCS;18-36;10.1007/978-3-319-46295-0_2;9783319462943;07/21/2018;;N;N;N;N;N;Y;N;N;N;;Business Collaboration Language (BCL);N;Y;N;N;Y;N;null;Y;N;Business Process collaborations;"IBM
University of California";Y;N;"They really don't specify a concrete language, but discusses the use of artifact centric processes abstractions.

(1)  Modellig. A key challenge is choosing the right mix of abstractions that cover the use cases from multiple industry sectors. Designing a coherent BCL that supports the more procedural style of, e.g., FSM’s, and also the more declarative style of, e.g., GSM and CMMN, is a particular challenge.

(2) View. Some notion of business artifact view and related constructs  will be central in helping to make progress in these areas.

(3) “On-ramps” to Blockchain. Adapting legacy business processes will  bring many challenges, including the impedance mismatch between the data-aware style of coordination enabled by Blockchain vs. the process-centric style of most legacy processes.

(4)Reasoning and Validation. how to obtain practical verification results in connection with 1-many relationships between business artifacts.

(5) Finding accurate and efficient ways to support a BCL on top of Blockchain adds another dimension to the engineering challenges.

(6)It remains open whether it will be better to implement a BCL using auto code generation, i.e., mapping a BCL program into, e.g., a Go or Java smart contract, or to create a BCL interpreter that can run on top of blockchains.

(7) Tools are needed for discovering smart contracts based on artifact types and their milestones, for quickly checking compatibility between them, and for reasoning about and testing behaviors resulting from their interactions.
";business collaborations in the space of manufacturing commerce;N;Y;N; 
9473;Smart-contract value-transfer protocols on a distributed mobile application platform;11;"Dai, P ; Mahi, N ; Earls, J ; Norta, A";Blockchain-enabled  smart  contracts  that  employ  proof-of-stake  validation  for  transactions,  promise  significant  performance  ad-vantages compared to proof-of-work solutions. For broad industry adop-tion, other important requirements must be met in addition. For exam-ple, stable backwards-compatible smart-contract systems must automatecross-organizational information-logistics orchestration with lite mobilewallets that support simple payment verification (SPV) techniques. Thecurrently leading smart-contract solution Ethereum, uses computation-ally expensive proof-of-work validation, is expected to hard-fork multipletimes in the future and requires downloading the entire blockchain. Con-sequently, Ethereum smart contracts have limited utility and lack formalsemantics, which is a security issue. This whitepaper fills the gap in thestate of the art by presenting the Qtum smart-contract framework thataims  for  sociotechnical  application  suitability,  the  adoption  of  formal-semantics language expressiveness, and the provision of smart-contracttemplate libraries for rapid best-practice industry deployment. We dis-cuss the Qtum utility advantages compared to the Ethereum alternativeand present Qtum smart-contract future development plans for industry-cases applications.;ACCEPTED;ACCEPTED;LOW;5;2017;Qtum Foundation,;smart  contract,  business  network  model,  DAPP,  mobile,information logistics, cross-organizational, peer-to-peer, distributed sys-tem, e-governance, Qtum framework;White Paper;;http://www.descryptions.com/Qtum.pdf,https://qtum.org/user/pages/01.home/Qtum%20whitepaper_en%20v0.7.pdf;;;;;;;N;N;N;N;N;Y;N;N;N;;Qtum Smart-Contract Language (QSCL) ontology based language;N;Y;N;N;Y;N;"Qtum
";N;Y;Smart Contract Mobile Device;"Qtum Foundation, Singapore
Large-Scale Systems Group, Tallinn University of Technology,";Y;N;"To support Qtum lifecycle management, the current lingua
franca Solidity lacks suitability. Consequently, the emerging Qtum-framework requires a novel smart-contract language with enhanced utility.

Qtum also recognizes that smart-contract lifecycle management requires applicationlayer development with sophisticated front-ender user experience that current solutions do not pay attention to sufficiently-";"real-life case from a failed seafood delivery 15 where a business-transaction conflict emerges from an underspecified
conventional contract (CC)";Y;N;N; 
9485;The Pact smart contract language;11;Popejoy, S;"Pact  is a new programming language for writing smart contracts to be  executed  by a  blockchain,    namely  Kadena,    the breakthrough    solution    for    private blockchains. Pact empowers    developers    to    implement robust,    performant  transactional    logic,    executing    
mission­critical    business    operations quickly    and    safely.";ACCEPTED;ACCEPTED;LOW;10;2017;;;White Paper;"Maybe to have it into account.
";http://kadena.io/docs/Kadena-PactWhitepaper.pdf;;;;;;;N;N;N;N;N;Y;N;N;N;;Pact;N;Y;N;N;Y;N;Kadena;Y;N;Private blockchain;kadena;N;Y;null;accounts module;Y;N;N; 
9492;Scilla: a smart contract intermediate-level language;11;"Sergey, I ; Kumar, A ; Hobor, A";"This paper outlines key design principles ofScilla—an intermediate level language for verifid smart contracts.
Scilla provides a clean separation between the communication aspect of smart contracts on a blockchain, allowing for the rich
interaction patterns, and a programming component, which enjoys principled semantics and is amenable to formal verifiation. Scilla
is not meant to be a high-level programming language, and we are going to use it as a translation target for high-level languages,
such as Solidity, for performing program analysis and verifiation, before further compilation to an executable bytecode.
We describe the automata-based model of Scilla, present its programming component and show how contract defiitions in
terms of automata streamline the process of mechanised verification of their safety and temporal properties.";ACCEPTED;ACCEPTED;LOW;10;2018;CoRR;;arXiv;"https://scilla-lang.org/
Blockchain platform Zilliqa (https://zilliqa.com/)(this information has been obtained by reading the scilla website, it is not in the original paper).
";;;;;;;;N;N;N;N;N;Y;N;N;N;;Scilla: a smart contract intermediate-level language;Y;N;N;N;Y;N;"Zilliqa
";Y;N;Safety;Zilliqa;N;Y;"(1)  defining a formal grammar and semantics of the language and implementing Scilla, as well as a developing and verifying a number of contracts in it, on a real-world blockchain platform.

One of the challenges of writing smart contracts is that the
implemented operational semantics of smart contract languages
admit rather subtle behaviour that diverge from the “intuitive understanding” of the language in the minds of contract developers";Crowdfunding;Y;N;N; 
9511;Safer smart contracts through type-driven development. Using dependent and polymorphic types for safer development of smart contracts;11;"Pettersson, J ; Edström, R";"We show how dependent and polymorphic types can make smart contract development safer. This is demonstrated by using the functional language Idris to describe smart contracts on the Ethereum platform. In particular, we show how one class of common errors can be captured at compile time using dependent types and algebraic side effects. We also bring type annotations to the realm of smart contracts,
helping developers to circumvent another class of common errors. To demonstrate the feasibility of our solutions, we have extended the Idris compiler with a backend for the Ethereum Virtual Machine.  While we find that the functional paradigm might not be the most suitable for the domain, our approach solves the identified problems and provides advantages over the languages in current use.
";ACCEPTED;ACCEPTED;LOW;5;2016;"Department of Computer Science and Engineering
CHALMERS UNIVERSITY OF TECHNOLOGY AND UNIVERSITY OF GOTHENBURG";"smart contracts; dependent types; polymorphic types; Ethereum; blockchain;
Idris; functional programming";Master Thesis;"It describes the use of Idris for writing smart contracts on Ethereum.

Functional";https://publications.lib.chalmers.se/records/fulltext/234939/234939.pdf;;;;;;;N;N;N;N;N;Y;N;N;N;;Idris;N;Y;N;N;Y;N;Ethereum;Y;N;Safety;CHALMERS U NIVERSITY OF T ECHNOLOGY AND U NIVERSITY OF G OTHENBURG;Y;N;"(1) An interesting future direction would b e to analyze real-life smart contracts written in our language, in order to identify additional common errors or patterns and investigate the possibility of eliminating or supp orting these using an extensive type system

(2) pure functions have no notion of communication, but Ethereum’s execution model is based entirely on messages that are sent between accounts, which it has in common

Formal verification aside, that the core language is unable to directly encode fundamental properties of the domain also suggests that the functional paradigm might not be the most suitable to use in practical development.

We believe that the problems we have discovered with the functional paradigm all hint in the direction of a language based on a process calculus. These models are designed to model concurrent and distributed systems, and view message passing as the fundamental operation of computation [48]. 

Regardless of which model we believe is suitable, evaluating different models of computation—e.g. the process calculi—with respect to the domain makes for very interesting future work.

we consider our revised choice of implementing side effects as primitive op erations an imp ortant advantage of our implementation. Not
only are they in fact primitive in this domain and more efficient, but this choice renders all parts of our library agnostic to the language targeted by the code generator,
thus easily reusable for future investigations into the field

owever, it is not clear whether a functional smart contract language is as beneficial as we initially envisioned, as noted in section 5.1.5. Admittedly, the problems we have identified are dependent on Ethereum’s execution model, namely that the system is based on accounts that send each other messages. Ethereum does have this in common with all smart contract platforms that we are aware of, but the field is still maturing and this may change. If it does, the functional paradigm
should be re-evaluated; for now, we conclude that further research is needed to find suitable paradigms for smart contract languages. We suggest that the process calculi are evaluated. They seem to encode the domain well, while most of them also lend themselves to formal verification and compositional program implementations";null;Y;N;N; 
9524;Designing secure Ethereum smart contracts: A finite state machine based approach;11;"Mavridou, A ; Laszka, A";he adoption of blockchain-based distributed computation platforms is growing fast. Some of these platforms, such as Ethereum, provide support for implementing smart contracts, which are envisioned to have novel applications in a broad range of areas, including finance and Internet-of-Things. However, a significant number of smart contracts deployed in practice suffer from security vulnerabilities, which enable malicious users to steal assets from a contract or to cause damage. Vulnerabilities present a serious issue since contracts may handle financial assets of considerable value, and contract bugs are non-fixable by design. To help developers create more secure smart contracts, we introduce FSolidM, a framework rooted in rigorous semantics for designing con- tracts as Finite State Machines (FSM). We present a tool for creating FSM on an easy-to-use graphical interface and for automatically generating Ethereum contracts. Further, we introduce a set of design patterns, which we implement as plugins that developers can easily add to their contracts to enhance security and functionality.;ACCEPTED;ACCEPTED;LOW;5;2017;CoRR;;arXiv;"To  help  developers  create  more  secure  smart  contracts,  we  introduce FSolidM ,  a  framework  rooted  in  rigorous  semantics  for  designing  contracts as Finite State Machines (FSM). 

I think it explain the same ideas than in Tool Demonstration: FSolidM for Designing Secure Ethereum Smart Contracts (0026), a previous accepted paper.";https://arxiv.org/pdf/1711.09327.pdf;;;abs/1711.09327;;;;N;N;N;N;N;Y;N;N;N;;FSolidM (based on FSM);N;Y;N;N;Y;N;Ethereum (Solidity) /Agnostic;Y;N;Security;"Vanderbilt University
University of Houston";Y;N;"(1) We plan to integrate model checkers and compositional verification tools into our framework to enable the verification of security and safety properties.
(1) We plan to extend our framework in multiple directions. First, we will introduce a number of plugins, implementing various security features and design patterns. We will provide security plugins for all the vulnerability types identified in [13] that can be addressed on the level of Solidity code. We will also
provide plugins implementing the most popular design patterns surveyed in [14].

(2) Second, we will integrate verification tools [11,12] and correctness-by-design techniques [21] into our framework.

(3) We will enable develop ers to mo del and verify multiple interacting
contracts as a set of interacting FSMs. ";null;N;Y;N; 
9551;Ekiden: A Platform for Confidentiality-Preserving, Trustworthy, and Performant Smart Contract Execution;11;"Raymond Cheng;Fan Zhang; Jernej Kos; Warren He; Nicholas Hynes; Noah M. Johnson; Ari Juels; Andrew Miller; Dawn Song";"Smart contracts are applications that execute on blockchains. Today they manage billions of dollars in value and motivate visionary plans for pervasive blockchain deployment. While smart contracts inherit the availability and other security assurances of blockchains, however, they are impeded by blockchains' lack of confidentiality and poor performance.
We present Ekiden, a system that addresses these critical gaps by combining blockchains with Trusted Execution Environments (TEEs). Ekiden leverages a novel architecture that separates consensus from execution, enabling efficient TEE-backed confidentiality-preserving smart-contracts and high scalability. Our prototype (with Tendermint as the consensus layer) achieves example performance of 600x more throughput and 400x less latency at 1000x less cost than the Ethereum mainnet.
Another contribution of this paper is that we systematically identify and treat the pitfalls arising from harmonizing TEEs and blockchains. Treated separately, both TEEs and blockchains provide powerful guarantees, but hybridized, though, they engender new attacks. For example, in naive designs, privacy in TEE-backed contracts can be jeopardized by forgery of blocks, a seemingly unrelated attack vector. We believe the insights learned from Ekiden will prove to be of broad importance in hybridized TEE-blockchain systems. ";ACCEPTED;ACCEPTED;LOW;5;2018;CoRR;;arXiv;"I don't know clearly if Ekiden provides a new Smart contract language, so I'll add it just in case.
DISCUSSION:
TR- Tengo dudas del lenguaje. El articulo habla del sistema y dice que los smart contracts están
AJ- Aceptamos. Soporta multiples lenguajes de Smart Contract pero aumenta capacidades de los mismos.		";https://arxiv.org/pdf/1804.05141.pdf;abs/1804.05141;;;;;;N;N;N;N;N;Y;N;N;N;;Ekiden contracts;N;Y;N;N;Y;N;Ekiden;Y;N;Confidentiality; UC Berkeley Cornell Tech UIUC Oasis Labs;Y;N;The system currently does not support calling contract functions from another contract. We leave this for future work.;"credit scoring application
Machine Learn ing Contracts:
Smart Building Thermal Modeling:
Tokens:
Poker
CryptoKitties
Origin
";Y;N;N; 
9657;A modern programming language for smart contracts;11;Roberts, N;"Blockchain platforms such as Ethereum have risen in popularity with programmers wishing to deploy their own decentralized applications (“smart contracts”). Because execution cost is paid in real currency, it’s desirable for smart contract programming languages to provide high-level features that clearly correspond to the cost model of Ethereum.
In this report, we introduce a language for writing smart contracts based on OCaml, a popular multi-paradigm language. The main technical contribution is retargeting the OCaml bytecode compiler to the Ethereum Virtual Machine. We evaluate the performance and usability of this implementation relative to Solidity, the most popular smart contract language. This is a fist step towards using Resource Aware
ML to automatically predict the execution cost of smart contracts";ACCEPTED;ACCEPTED;LOW;10;2018;andrew.cmu.edu;Compilers, blockchain, Ethereum, Resource Aware ML;Report;"Es un report.

Ahora mismo no hay acceso";https://ncik-roberts.github.io/15400/files/report.pdf;;;;;;;N;N;N;N;N;Y;N;N;N;;null ¿OCaml?;Y;N;N;N;Y;N;Ethereum;Y;N;bytecode, EVM retargeting;Carnegie Mellon University;Y;N;"In future work, this implementation could allow for interfacing with existing static analysis tools related to OCaml, such as Resource Aware ML.

The original motivation for this work was to develop a framework for bounding the resource consumption of smart contracts. Resource Aware ML (RAML)[5] is such a resource analysis framework for a language similar to OCaml, so we wished to investigate whether its techniques could be extended to a setting of the blockchain

To make OCaml feasible as a frontend language for Ethereum developers, performance is the path forward";lottery contract;Y;N;N; 
9692;Formal Modeling and Verification of Smart Contracts;11;"Bai, X ; Cheng, Z ; Duan, Z ; Hu, K";Smart contracts can automatically perform the contract terms according to the received information, and it is one of the most important research fields in digital society. The core of smart contracts is algorithm contract, that is, the parties reach an agreement on the contents of the contract and perform the contracts according to the behaviors written in certain computer algorithms. It not only needs to make sure about the correctness of smart contracts code, but also should provide a credible contract code execution environment. Blockchain provides a trusted execution and storage environment for smart contracts by the distributed secure storage, consistency verification and encryption technology. Current challenge is how to assure that smart contract can be executed as the parties' willingness. This paper introduces formal modeling and verification in formal methods to make smart contract model and verify the properties of smart contracts. Formal methods combined with smart contracts aim to reduce the potential errors and cost during contract development process. The description of a general and formal smart contract template is provided. The tool of model checking, SPIN, is used to verify the correctness and necessary properties for a smart contract template. The research shows model checking will be useful and necessary for smart contracts;ACCEPTED;ACCEPTED;LOW;5;2018;ICSCA 2018: Proceedings of the 2018 7th International Conference on Software and Computer Applications;Formal Verification, Formal methods, Model checking, Modeling, SPIN, Smart contracts ;Conference Paper;It could be seen as a formal smart contract language, so I'm going to add it, just in case.;https://dl.acm.org/citation.cfm?id=3185138;;322-326;10.1145/3185089.3185138;978-1-4503-5414-1;;;N;N;N;N;N;Y;N;N;N;;null;N;Y;N;N;Y;N;null;Y;N;Verification;"Beihang University, Beijing
Laboratory of Space-Ground Integrated Information Technology, Beijing Institute of Satellite Information Engineering,";Y;N;"The research shows model checking will be useful and necessary
for smart contracts.";Shopping smart contract;N;Y;N; 
9710;An introduction to Commitment Based Smart Contracts using ReactionRuleML;11;"Kruijff, J de ; Weigand, H";Smart contracts gain rapid exposure since the inception of blockchain technology.    Today's  smart  contracts  are  coded  in  non-mainstream procedural  programming  languages  (e.g.  Solidity  for  Ethereum), which lifts the requirement to draft enterprise ready smart contract to both a legal professional and a programmer instead of only the former. In search for a smart contract languagethat reduces the threshold to draft one, this conceptual paper elaborates how business logic can be converted to executable codeforcommitment-based smart contracts. Hereby, a contract is viewed as a set of reciprocal commitments. Thesmart contract ensuresthe automated execution of all or most of these commitments. In  order  to  leverageits  event  processing  capabilities, Reaction RuleML has  been used to  appropriately  represent the elements and   working ofpassive   and   active ruleswithin   acommitment based smart;ACCEPTED;ACCEPTED;LOW;5;2018;Proceedings of the 12th International Workshop on Value Modeling and Business Ontologies;RuleML, Reaction  RuleML,  Blockchain,Commitment-Based Smart Contracts;Workshop paper;It uses RuleML as a language for defining Smart-Contract;http://ceur-ws.org/Vol-2239/article_16.pdf;2239;149-157;;1613-0073;;;N;N;N;N;N;Y;N;N;N;;Reaction RuleML ;N;Y;N;N;N;Y;n/a;N;Y;"legal practice
commitment-based smart contracts";Tilburg University;Y;N;"(1) An important next step for the development of commitment based smart
contracts as a concept is to apply it in distinctive use-cases and
implementation options.
(2) as well as the verification of input events, in particular when these events are outside the blockchain.";null;N;Y;N; 
9784;Fun with Bitcoin smart contracts;11;"Bartoletti, M ; Cimoli, T ; Zunino, R";Besides simple transfers of currency, Bitcoin also enables various forms of smart contracts, i.e. protocols where users interact within pre-agreed rules, which determine (possibly depending on the actual interaction) how currency is eventually distributed. This paper provides a gentle introduction to Bitcoin smart contracts, which we specify by abstracting from the underlying Bitcoin machinery. To this purpose we exploit BitML, a recent DSL for smart contracts executable on Bitcoin.;ACCEPTED;ACCEPTED;LOW;5;2018;International Symposium on Leveraging Applications of Formal Methods ISoLA 2018: Leveraging Applications of Formal Methods, Verification and Validation. Industrial Practice ;;Conference paper;This paper provides a gentle introduction to Bitcoin smart contracts, which we specify byabstracting from the underlying Bitcoin machinery. To this purpose weexploit BitML, a recent DSL for smart contracts executable on Bitcoin;https://link.springer.com/chapter/10.1007/978-3-030-03427-6_32;11247;;https://doi.org/10.1007/978-3-030-03427-6_32;978-3-030-03427-6;;;N;N;N;N;N;Y;N;N;N;;BitML;N;Y;N;N;Y;N;Bitcoin;N;Y;"Safety
";"Universit` a degli Studi di Cagliari, Cagliari, Italy
Universit` a degli Studi di Trento, Trento, Italy";Y;N;"Although BitML can express many of the smart contracts appeared in the literature [4], there exist some contracts which can be executed on Bitcoin but are not expressible in BitML. Ex. contingent payment contracts.

Another kind of contracts which are not expressible in BitML are
those for which one cannot pre-determine a finite set of transactions, or of signatures, before executing the contract. This is the case, e.g. , of crowdfunding contracts

The existence of negative results on the expressiveness of Bitcoin contracts is still an open question";"contract advertisement 
Direct Payment
Payment from Multiple Senders
Procrastinating Payments
Authorizing Payments
Splitting Deposits
Volatile Deposits
Revealing Secrets
Lotteries and Other Games";Y;N;N; 
9868;BitML: a calculus for Bitcoin smart contracts;11;"Bartoletti, M ; Zunino, R";"We intro duce BitML, a domain-specifi language for specifying contracts that regulate transfers of bitcoins among participants,
without relying on trusted intermediaries. We defnie a symbolic and a computational mo del for reasoning about BitML security. In
the symbolic model, participants act according to the semantics of BitML, while in the computational mo del they exchange bitstrings,
and read/app end transactions on the Bitcoin blo ckchain. A compileris provide d to translate contracts into standard Bitcoin transactions.
Participants can execute a contract by app ending these transactions on the Bitcoin blo ckchain, according to their strategies. We prove
the correctness of our compiler, showing that computational attacks on compiled contracts are also obser vable in the symbolic model.";ACCEPTED;ACCEPTED;LOW;5;2018;Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security (CCS '18);"Bitcoin; smart contracts; process calculi";Conference Paper;;https://dl.acm.org/citation.cfm?doid=3243734.3243795;;83-100;https://doi.org/10.1145/3243734.3243795;978-1-4503-5693-0;;;N;N;N;N;N;Y;N;N;N;;BitML;N;Y;N;N;Y;N;Bitcoin;N;Y;Safety;"University of Cagliari
University of Trento";Y;N;Although BitML can express many of the smart contracts appeared in literature [14], it has some limitations. For instance, it cannot express contingent payments, ;null;Y;N;N; 
309615;Solidity Documentation;13;Ethereum;;ACCEPTED;ACCEPTED;LOW;0;2019;;;WebSite;https://solidity.readthedocs.io/en/develop/;https://solidity.readthedocs.io/en/latest/;;;;;07/01/2019;;N;N;N;N;N;Y;N;N;N;;Solidity;Y;N;N;N;Y;N;Ethereum;Y;N;Blockchain;Independant and Ethereum developers;N;Y;null;"voting, 
crowdfunding, 
blind auctions, 
and multi-signature wallets.";Y;N;N; 
309616;DAML SDK Documentation;13;Digital Asset (Switzerland) GmbH;;ACCEPTED;ACCEPTED;LOW;0;2017;;;WebSite;https://daml.com/;https://docs.daml.com/_downloads/DigitalAssetSDK.pdf;;;;;07/01/2019;;N;N;N;N;N;Y;N;N;N;;DAML;Y;N;N;N;Y;N;Digital Asset Ledger;Y;N;"multi-party business processes
These are examples: Financial products and services
";Digital ASset;N;Y;null;Financial products and services;Y;N;N; 
316904;A Formal Language for Analyzing Contracts;14;Nick Szabo;;ACCEPTED;ACCEPTED;LOW;0;2002;;;WebSite;;https://nakamotoinstitute.org/contract-language/;;;;;07/01/2019;;N;N;N;N;N;Y;N;N;N;;null;N;Y;N;N;N;Y;n/a;N;Y;"Verification
financial contracts
financial contracts, liens and other kinds of security, transfer of ownership, performance of online services, and supply chain workflow.";"Satoshi Nakamoto Institute

";Y;N;Implementations that satisfy the above assumptions for the particular language atoms, and also for compositions of the atoms.;"* well-known financial contract, the future
* another kind of financial contract the option
* Damage Clauses
* Insurance
* multiparty agreements
* Hooking Up Machines";N;Y;N; 
355426;Codius - White paper;15;Evan Schwartz and Stefan Thomas;;ACCEPTED;ACCEPTED;LOW;0;2018;;;White Paper;"https://codius.org/docs/overview/what-is-codius

Accepted but is currently in beta status
DISCUSSION

TR-Tengo dudas, creo que proponen smart oracles, no un lenguaje de smart contract. The smart oracles are trusted or semi-trusted entities that can both provide information about the outside world and execute the code to which the contracting parties agreed	

AV-Aceptamos como lenguaje. Sacado de la referencia. Smart oracles provide a simple, flexible way to implement smart contracts, which encode business logic, laws, and other agreed-upon rules. Smart oracles build on the idea of oracles, or entities that provide smart contracts with information about the state of the outside world, and combine information gathering with contract code execution. In such a system, rules can be written in any programming language and contracts can interact with any service that accepts cryptographically signed commands.
";https://github.com/codius/codius-wiki/wiki/White-Paper;;;;;07/03/2019;;N;N;N;N;N;Y;N;N;N;;Codius;Y;N;N;N;N;Y;Bitcoin, XRP;Y;N;smart oracles;Codius;N;Y;null;"Bridges between value networks
Escrow
Cryptocurrency wallet controls
Auctions for digital assets
Derivatives
Debt and equity
Smart property
Voting";Y;N;N; 
361026;Ivy for Bitcoin: a smart contract language that compiles to Bitcoin Script;25;Chain;;ACCEPTED;ACCEPTED;LOW;0;2017;;;Website;"https://ivy-lang.org/bitcoin
https://docs.ivy-lang.org/bitcoin/";https://blog.chain.com/ivy-for-bitcoin-a-smart-contract-language-that-compiles-to-bitcoin-script-bec06377141a;;;;;07/05/2019;;N;N;N;N;N;Y;N;N;N;;Ivy;Y;N;N;N;Y;N;Bitcoin;Y;N;Blockchain;Chain;N;Y;"Ivy is prototype software and is intended for educational purposes only
The Ivy Playground and SDK do not currently support creating testnet or mainnet transactions";"* LockWithPublicKey
* LockWithMultiSig
* LockWithPublicKeyHash
* RevealPreimage
* RevealCollision
* RevealFixedPoint
* LockUntil
* LockDelay
* TransferWithTimeout
* EscrowWithDelay
* VaultSpend
* HTLC
";Y;N;N; 
361064;Bamboo: a language for morphing smart contracts;30;Yoichi hirai;;ACCEPTED;ACCEPTED;LOW;10;2017;;;Github page;"cornell blockchain
https://github.com/pirapira/bamboo
 https://github.com/cornellblockchain/bamboo";https://github.com/pirapira/bamboo;;;;;07/05/2019;;N;N;N;N;N;Y;N;N;N;;Bamboo;Y;N;N;N;Y;N;Ethereum;N;Y;Polymorphic contracts;Cornell University Blockchain Club;N;Y;null;"* A payment channel
* An ERC20 contract
* A vault
";Y;N;N; 
361073;Babbage - a mechanical smart contract language;22;Christian;;ACCEPTED;ACCEPTED;LOW;10;2017;;;Blog;Visual DSL ;https://medium.com/@chriseth/babbage-a-mechanical-smart-contract-language-5c8329ec5a0e;;;;;07/05/2019;;N;N;N;N;N;Y;N;N;N;;Babbage;N;N;Y;N;Y;N;Ethereum;Y;N;Visual programming;Ethereum;N;Y;It is an idea, not an implementation.;null;Y;N;N; 
361076;The Liquidity Language for smart contracts;22;Fabrice Le Fessant  and Alain Mebsout and David Declerk and Adrien Champion;;ACCEPTED;ACCEPTED;LOW;10;2018;;;WebSite;;http://www.liquidity-lang.org/;;;;;07/05/2019;;N;N;N;N;N;Y;N;N;N;;Liquidity;Y;N;N;N;Y;N;Tezos;N;Y;null;OCalmPro;N;Y;null;A Game with an oracle;N;N;N; 
361077;Michelson: the language of Smart Contracts in Tezos;22;Nomadic Labs;;ACCEPTED;ACCEPTED;LOW;10;2018;;;WebSite;"http://www.liquidity-lang.org/doc/reference/michelson.html
https://www.michelson-lang.com/";https://tezos.gitlab.io/master/whitedoc/michelson.html;;;;;07/05/2019;;N;N;N;N;N;Y;N;N;N;;Michelson;N;Y;N;N;Y;N;Tezos;Y;N;Blockchain;Tezos;N;Y;null;"Map to fold
Sorting a list
A list of transactions
Append two lists
More Set Operations";Y;N;N; 
361078;Formal Specification of the Plutus Core Language (rev. 10);22;Michael Peyton Jones;;ACCEPTED;ACCEPTED;LOW;5;2018;;;GitHub page;"https://github.com/input-output-hk/plutus
https://testnet.iohkdev.io/plutus/get-started/writing-contracts-in-plutus/
";https://cardanodocs.com/technical/plutus/introduction;;;;;07/05/2019;;N;N;N;N;N;Y;N;N;N;;Plutus;N;Y;N;N;Y;N;Cardano;Y;N;"Plutus is intended for use by
    “financial institutions, places that do electronic trading and other such financial operations with money at stake.” (https://blockgeeks.com/guides/vyper-plutus/)

Plutus, IOHK’s Haskell-based smart contract language. Haskell is a functional programming language, which means it’s easier to test and less prone to human error, so anything written in Haskell – and by extension Plutus – is more likely to be reliable and secure. Plutus can also be used for both on and off-chain code, simplifying the development experience and eliminating errors commonly introduced in the transition between languages on and off-chain.
";IOHK;N;Y;null;null;N;N;N; 
361079;Contracts, Composition, and Scaling.The Rholang specification;22;Lucius Gregory Meredith, Jack Pettersson, Gary Stephenson, Michael Stay, Kent Shikama, Joseph Denman;;ACCEPTED;ACCEPTED;LOW;0;2018;;;Report;"https://architecture-docs.readthedocs.io/
https://github.com/rchain/Rholang";https://developer.rchain.coop/assets/rholang-spec-0.2.pdf;;;;;07/05/2019;;N;N;N;N;N;Y;N;N;N;;Rholang;N;Y;N;N;Y;N;RChain;N;Y;social contract;RChain;N;Y;null;"Cell contract
Wallet contract
";N;N;N; 
361081;Vyper - Vyper documentation;22;Vitalik Buterin;;ACCEPTED;ACCEPTED;LOW;0;2018;;;WebSite;"https://blockonomi.com/scilla-vyper/
https://vyper.readthedocs.io/en/latest/?badge=latest";https://viper.readthedocs.io/en/latest/;;;;;07/05/2019;;N;N;N;N;N;Y;N;N;N;;Vyper;Y;N;N;N;Y;N;Ethereum;Y;N;Cryptocurrency;Ethereum;N;Y;null;"* Simple Open Auction
* Safe Remote Purchases
* Crowdfund
* Voting
* Company Stock";N;N;N; 
361084;Peer-to-peer Affine Commitment Using Bitcoin;22;Crary, Karl and Sullivan, Michael J.;The power of linear and affine logic lies in their ability to model state change. However, in a trustless, peer-to-peer setting, it is difficult to force principals to commit to state changes. We show how to solve the peer-to-peer affine commitment problem using a generalization of Bitcoin in which transactions deal in types rather than numbers. This has applications to proof-carrying authorization and mechanically executable contracts. Importantly, our system can be---and is---implemented on top of the existing Bitcoin network, so there is no need to recruit computing power to a new protocol. ;ACCEPTED;ACCEPTED;LOW;0;2015;"Proceeding
PLDI '15 Proceedings of the 36th ACM SIGPLAN Conference on Programming Language Design and Implementation";Proof-carrying authorization, cryptocurrencies, distributed systems},;Conference paper;"Defines Typecoin

I have included it as a result of 413251 survey";http://doi.acm.org/10.1145/2813885.2737997;50;479--488;10.1145/2813885.2737997;0362-1340;07/05/2019;;N;N;N;N;N;Y;N;N;N;;Typecoin;Y;N;N;N;Y;N;Bitcoin;Y;N;Cryptocurrency;Carnegie Mellon University;Y;N;* Using receipts and conditionals, we can extend the newcoin example in several interesting ways;"* proof-carrying authorization 
* mechanically executable contracts";Y;N;N; 
361085;Zen Protocol's Smart Contract Paradigm - Zen Protocol;22;Asher Manning;;ACCEPTED;ACCEPTED;LOW;5;2017;;;Blog;"Language: https://docs.zenprotocol.com/zf
https://medium.com/@ethereumwisdom/zen-protocol-smart-contracts-on-bitcoin-blockchain-83b7bf7ed3f2
https://www.zenprotocol.com/files/technical_paper.pdf

TR- Tengo dudas, habla sobre el protocolo, no sobre el lenguaje	
AV-Aceptamos. Encontré esta referencia: https://docs.zenprotocol.com/zf 
En ella se habla de ZF  como lenguaje de smart contract dialecto de F  para Zen Protocol. Y según la web de Zen se usa no solo para finance sino para tokenized assets, assurances, derivatives, currency, .... ";https://blog.zenprotocol.com/zen-protocols-smart-contract-paradigm-a6e54a187d84;;;;;07/05/2019;;N;N;N;N;N;Y;N;N;N;;ZF*;N;Y;N;N;Y;N;Zen Protocol;N;Y;Blockchain this paper presents a blockchain;Zen;N;Y;null;null;Y;N;N; 
372637;Script;40;Roconnor;;ACCEPTED;ACCEPTED;LOW;0;2016;;;Wiki page;"http://bitcoinscri.pt/
https://medium.com/lumiwallet/bitcoin-smart-contracts-b3ae6a4b3041";https://en.bitcoin.it/w/index.php?title=Script&oldid=61707;;;;;07/07/2019;;N;N;N;N;N;Y;N;N;N;;Script;Y;N;N;N;Y;N;Bitcon;Y;N;Cryptocurrency;Bitcoin;N;Y;null;null;Y;N;N; 
405754;A Method of Logic-Based Smart Contracts for Blockchain System;44;Hu, Jingwen and Zhong, Yong;Recently, blockchain systems have attracted intensive attentions from academia, industrial circles and governments, which make smart contract a hit since it is an important research topic for blockchain system. We propose a logic-based smart contract model Logic-SC for blockchain system based on semantics and syntax of Active-U-Datalog with some temporal extensions. Logic-SC model owns a triggering mechanism by temporal active rules, which can satisfy the expressiveness and flexibility of the smart contracts for blockchain system. The paper introduces the rules, structure of contracts and implementation of the model. Finally, an application is exampled to show the effectiveness of the model.;ACCEPTED;ACCEPTED;LOW;9;2018;Proceedings of the International Conference on Data Processing and Applications;Active-U-Datalog, Blockchain, Smart contract, logic language;Conference paper;Extension of Active-U-Datalog;http://doi.acm.org/10.1145/3224207.3224218;;58--61;10.1145/3224207.3224218;978-1-4503-6418-8;07/11/2019;;N;N;N;N;N;Y;N;N;N;;Logic-SC;N;Y;N;N;Y;N;Agnostic;N;Y;"Active Rules,
Temporal Aspects";Foshan Open University;N;Y;"we plan to research integral expressing language for the model with the syntax and semantics. And the practical application of the model on blockchain platform is also needed to
be investigated further.";"* licensing contractual clauses for the evaluation of a product
*";Y;N;N; 
405758;Light-Weight Programming Language for Blockchain (Demo);44;Kim, Junhui and Kim, Joongheon;"This demo abstract introduces a new light-weight programming language koa which is suitable for blockchain system design and implementation. In this abstract, the basic features of koa are introduced including working system (with playground), architecture, and virtual machine operations. Rum-time execution of software implemented by koa will be presented during the session.
";ACCEPTED;ACCEPTED;LOW;9;2019;Proceedings of the 17th Annual International Conference on Mobile Systems, Applications, and Services;blockchain, programming language, smart contract;Conference paper;https://github.com/DE-labtory/koa;http://doi.acm.org/10.1145/3307334.3328567;;653--654;10.1145/3307334.3328567;978-1-4503-6661-8;07/11/2019;;N;N;N;N;N;Y;N;N;N;;koa;Y;N;N;N;Y;N;"Bitcoin?? (see ""This language, called Koa, solves difiulties of understanding and analyzes the code what the scriptlanguage of the Bitcoin has with high-level language style"". ";Y;N;Blockchain;Chung-Ang University;N;Y;null;null;N;N;N; 
405830;Towards Agent-Oriented Blockchains: Autonomous Smart Contracts;45;Ciatto, Giovanniand Maffi, Alfredoand Mariani, Stefanoand Omicini, Andrea;Features of blockchain technology (BCT) such as decentralisation, trust, fault tolerance, and accountability, are of paramount importance for multi-agent systems (MAS). In this paper we argue that a principled approach to MAS-BCT integration cannot overlook the foundational character of agency---that is, autonomy. Accordingly, we present a custom BCT implementation where autonomy is placed in smart contracts (SC) interpreted as software agents. We show how agency can enhance SC expressiveness with autonomy, situatedness, sociality, and intelligence, and highlight the limitations of state-of-art BCT in supporting MAS design and implementation.;ACCEPTED;ACCEPTED;LOW;8;2019;"International Conference on Practical Applications of Agents and Multi-Agent Systems
PAAMS 2019: Advances in Practical Applications of Survivable Agents and Multi-Agent Systems: The PAAMS Collection ";Autonomy Smart contracts Blockchain Multi-agent systems ;Conference paper;"As a first stop in our investigation, we propose Tenderfone2, a language and associated interpreter for the execution of autonomous, asynchronous, time-aware, and logic-based SC, implemented on top of the ledger-based SMR engine Tendermint [10]. First, we model the language for programming SC, then we describe the Tenderfone Interpreter, emphasising the assumptions required for the underlying BCT. In fact, as we chose Tendermint as our implementation platform, any other BCT satisfying such assumptions could be used instead.

Tenderfone language is a declarative language based on First Order Logic (FOL), hence the associated Tenderfone Interpreter is essentially a logic-based reasoning
engine ";https://link--springer--com.us.debiblio.com/chapter/10.1007/978-3-030-24209-1_3;;29--41;https://doi.org/10.1007/978-3-030-24209-1_3;978-3-030-24209-1;07/11/2019;;N;N;N;N;N;Y;N;N;N;;Tenderfone;N;Y;N;N;Y;N;Tendermint;N;Y; agents;Alma Mater Studiorum–Universit`a di Bologna, Bologna, Italy;Y;N;"e endow SC with autonomy, situatedness, and rationality; we draw a roadmap for SC towards agency;
1. encapsulation of control fl ow (for computational autonomy [15])
2. asynchronous interaction (for social autonomy [4])
3. reactiveness to time, space, environment (for situatedness)
4. logic inference (for goal-drivenness, weak agency)
5. BDI architecture (for goal-drivenness, strong agency)";the handling of a public tender;N;N;N; 
405858;Proof-Carrying Smart Contracts;45;Dickerson, Thomasand Gazzillo, Pauland Herlihy, Mauriceand Saraph, Vikramand Koskinen, Eric;We propose a way to reconcile the apparent contradiction between the immutability of idealized smart contracts and the real-world need to update contracts to fix bugs and oversights. Our proposal is to raise the contract's level of abstraction to guarantee a specification varphi instead of a particular implementation of that specification. A combination of proof-carrying code and proof-aware consensus allows contract implementations to be updated as needed, but so as to guarantee that varphi cannot be violated by any future upgrade.;ACCEPTED;ACCEPTED;LOW;8;2019;"International Conference on Financial Cryptography and Data Security
FC 2018: Financial Cryptography and Data Security ";;Conference paper;;https://link--springer--com.us.debiblio.com/chapter/10.1007/978-3-662-58820-8_22;;325--338;https://doi.org/10.1007/978-3-662-58820-8_22;978-3-662-58820-8;07/11/2019;;N;N;N;N;N;Y;N;N;N;;Proof-Carrying Smart Contracts (PCSC);Y;N;N;N;Y;N;Agnostic;N;Y;"update contracts
";"Brown University, Providence, USA
Stevens Institute of Technology, Hoboken, USA";Y;N;"The idea of mixing code and proofs goes back to Necula’s proof-carrying
code. The blockchain context, however, brings new challenges: What
format is needed for contracts’ specifications, and where are these specifications
stored? Which code needs to be verified? Who generates the proofs? How do
miners repeatedly validate the proofs? 

In our ongoing work, we are developing verification to ols for PCSC, building on
recent works for verification of solidity

There are already verification challenges at the source code level, being tackled by us and
others 

Much remains to be done on proof-carrying smart contracts. The work
reported here is still in an early stage, and we are not yet far enough along
to report on progress or difficulties.

Future goals include formally modeling proof-carrying smart contracts and
creating an implementation as an extension of the Ethereum blockchain and virtual machine

Extending smart contracts with specifications requires defining extensions to the smart contract implementation language and the byteco de to represent the specifications as well as mappings from source code to bytecode specifications. 

For implementation, we intend to extend the c ontract virtual machine with new op codes to add new contracts with specifications as well as update them given a new proof.

Proof-carrying smart contracts open up new research questions. For instance,
how do we integrate proofs into blockchain consensus and how do mining and
consensus mechanisms, such as proof-of-work and proof-of-stake, interact with
formal proofs?";The ERC20 specification;N;Y;N; 
405937;Marlowe: Financial Contracts on Blockchain;45;Lamela Seijas, Pabloand Thompson, Simon;Blockchains allow the specification of contracts in the form of programs that guarantee their fulfilment. Nevertheless, errors in those programs can cause important, and often irretrievable, monetary loss. General-purpose languages provide a platform on which contracts can be built, but by their very generality they have the potential to exhibit behaviours of an unpredictable kind, and are also not easy to read or comprehend for general users.;ACCEPTED;ACCEPTED;LOW;3;2018;"International Symposium on Leveraging Applications of Formal Methods
ISoLA 2018: Leveraging Applications of Formal Methods, Verification and Validation. Industrial Practice ";;Conference paper;https://blog.goodaudience.com/marlowe-financial-smart-contracts-in-cardano-4ebb8fd94e24;https://link--springer--com.us.debiblio.com/chapter/10.1007/978-3-030-03427-6_27;;356--375;https://doi.org/10.1007/978-3-030-03427-6_27;978-3-030-03427-6;07/11/2019;;N;N;N;N;N;Y;N;N;N;;Marlowe;N;Y;N;N;Y;N;"Marlowe abstracts away from a number of concrete details of how blockchains
operate. In particular, it is agnostic between UTxO-based systems, such as Bitcoin and Cardano SL, and account-based models such as Ethereum; it can be
implemented on “push” or “pull”-based systems, and can be executed on or
off-chain.";N;Y;Finances;School of Computing, University of Kent, Canterbury, UK;Y;N;"Programming on the blockchain therefore needs to be constrained in some ways, since it has to be amenable to replication or verification within a reasonable time if the security and integrity of the chain are to be preserved. 

Split Contracts. An early work on smart contracts raises the issue that practical contractual situations may well not be amenable to complete formalisation, hence giving rise to a split [14] between an automated part and a non-automated part that mediates, for example, real assets. We can foresee that this approach will be needed for Marlowe too, if it achieves read-world adoption.

We will continue to develop the core language, for example considering the automation of generation of identifiers for commitments and others.

We will also develop QuickCheckstyle property-based testing [4], and properties developed here can become candidates for fully fledged verification in a formalisation of the semantics of Marlowe.
";escrow contract;Y;N;N; 
405952;Enriching Smart Contracts with Temporal Aspects;45;Fournier, Fabianaand Skarbovsky, Inna;Blockchain technology provides a platform for the decentralized execution of smart contracts. A smart contract is an agreement that is automatically executed when certain conditions are met. Current smart contracts use business rules to express conditions in which transactions occur but lack the capability to reason over time. We present a model-driven approach for creating blockchain applications that can run temporal logic. We present the new concepts required at the model level and explain how these concepts can be translated to a blockchain solution applying Hyperledger Fabric, Hyperledger Composer, and PROTON complex event processing. We illustrate the approach using a pharma cold chain scenario. Cold chain scenarios are typical examples of blockchain cases in which temporal reasoning is required. Here, the blockchain provides transparency, a non-repudiation process, full traceability and trackability of the transactions (provenance), shorter lead times, and authentication and verification of the parties in the supply chain network at each asset transfer. The temporal reasoning is required since decisions about pharmaceutical quality is based on time windows in which the goods have been exposed to certain conditions. Our solution includes the model, the blockchain backend, and a mobile user interface that allows each certified and authorized party in the network to initiate actions, finish their transactions, and track progress. It also includes temperature monitoring to ensure compliance with the proper conditions for transportation and asset transfer.;ACCEPTED;ACCEPTED;LOW;14;2019;"International Conference on Blockchain
ICBC 2019: Blockchain – ICBC 2019 ";Blockchain Hyperledger Fabric Hyperledger Composer Cold chain Complex event processing ;Conference paper;;https://link--springer--com.us.debiblio.com/chapter/10.1007/978-3-030-23404-1_9;;126--141;https://doi.org/10.1007/978-3-030-23404-1_9;978-3-030-23404-1;07/11/2019;;N;N;N;N;N;Y;N;N;N;;null;Y;N;N;N;Y;N;Hyperledger;N;Y;Healthcare;IBM Research - Haifa, University of Haifa;Y;N;"Blockchain is a new technology and most of the work in this space has been focusedon the infrastructures themselves, where the business logic of the applications has been tailored or customized to the specific purpose of the application at hand. 

Our future plans include: the automatic translat ion of the event-driv en generation
logic to the JSON fi le that represents the EPN from the Compos er defi nitions (as
explai ned in [12]), applying the approach in more scenarios, and formalizing the
inclusion of the new proposed concepts into Composer.";"pharma cold chain scenario. Cold chain scenarios are typical examples
of blockchain cases in which temporal reasoning is required";Y;N;N; 
405989;Empowering Business-Level Blockchain Users with a Rules Framework for Smart Contracts;45;Astigarraga, Taraand Chen, Xiaoyanand Chen, Yaoliangand Gu, Jingxiaoand Hull, Richardand Jiao, Limeiand Li, Yuliangand Novotny, Petr;"The importance and adoption of Blockchain to support secure and trusted collaborations between businesses continues to grow. In today's practice, most Blockchain smart contracts (which capture the business processing logic) are written primarily by software developers. To enable widespread adoption of Blockchain, business analysts and subject matter experts will need to have direct access to the smart contract logic, including the abilities to understand, modify, and create substantial portions of that logic. This paper describes a fully functioning framework and system for specifying and executing smart contracts in which the core logic is specified by a controlled English, business-level rules language. The framework includes a browser-based smart editor for rules; a parser generator that enables substantial variation in the rules syntax; code generation that maps to a RETE based rules engine; and execution of the rules in either on-chain (using Hyperledger Fabric) or off-chain modes. The paper describes the rules framework and possible extensions, and identifies key aspects of Blockchain that impact the implementation.";ACCEPTED;ACCEPTED;LOW;17;2018;"International Conference on Service-Oriented Computing
ICSOC 2018: Service-Oriented Computing ";;Conference paper;;https://link--springer--com.us.debiblio.com/chapter/10.1007/978-3-030-03596-9_8;;111--128;https://doi.org/10.1007/978-3-030-03596-9_8;978-3-030-03596-9;07/11/2019;;N;N;N;N;N;Y;N;N;N;;Business Collaboration Rules Language;Y;N;N;N;Y;N;Hyperledger;Y;N;Business Process collaborations;IBM;Y;N;* These results indicate that BCRL can be a good starting point for future research on smart contract verification.;Billing use case;N;Y;N; 
406018;SmaCoNat: Smart Contracts in Natural Language;48;"E. Regnath ; S. Steinhorst";Smart contracts enable autonomous decentralized organizations (DADs) in large, trustless and open trading networks by specifying conditions for automated transactions of cryptographically secured data. This data could represent cryptocurrencies but also sensor data or commands to Cyber-Physical Systems (CPS) connected to the Internet. To provide reliability, the contract code is enforced by consensus and the transactions it triggers are nonrevertible, even if they were not intended by the programmer, which could lead to dangerous system behavior. In this paper, we conduct a survey over existing smart contract platforms and languages to determine requirements for the design of a safer contract language. Subsequently we propose concepts that enhance the understanding of code by limiting confusing language constructs, such as nesting, arbitrary naming of operations, and unreadable hash identifiers. This enables human reasoning about the contract semantics on a much higher abstraction layer, because a common understanding can be derived from the language specification itself. We implement these concepts in a new domain specific language called SmaCoNat to illustrate the feasibility and show that our concepts are barely covered by existing languages but significantly enhance readability and safety without violating deterministic parsability.;ACCEPTED;ACCEPTED;LOW;46;2018;2018 Forum on Specification & Design Languages (FDL);"business data processing;contracts;cryptography;formal specification;Internet;specification languages;contract semantics;language specification;domain specific language;autonomous decentralized organizations;trustless trading networks;open trading networks;automated transactions;cryptographically secured data;contract code;smart contract platforms;cyber-physical systems;SmaCoNat;cryptocurrencies;CPS;Internet;contract language safety;deterministic parsability;Global Positioning System;Hafnium compounds;Contracts;TV;Optical fibers;Law;Smart Contract;DSL;Blockchain;IoT;CPS";Conference Paper;;https://ieeexplore--ieee--org.us.debiblio.com/document/8524068;;;10.1109/FDL.2018.8524068;1636-9874;;;N;N;N;N;N;Y;N;N;N;;SmaCoNat;Y;N;N;N;Y;N;Agnostic;Y;N;Natural Language;Technical University of Munich;Y;N;"Most existing implementations execute low-level byte code in a Turing-complete virtual machine, or restrict contract capabilitites to fixed templates that offer simple conditional execution of transactions.

The high diversity of the languages used to program smart contracts illustrates the problem that there is not suitable known language yet and the platforms often attempt to create such a language by their own.

Most implementations identified the need to limit language constructs to achieve a determinstically terminating program which achieves some safety on the execution level.

On the semantic level there is no effort to provide safety by providing a common understanding for all involved parties.

What is also missing is the concept of permissions. Accounts need to authenticate via a signature to transfer their assets but beyond that there are no restrictions for transactions of assests";null;N;Y;N; 
406019;Automatic Smart Contract Generation Using Controlled Natural Language and Template;48;"T. Tateishi ; S. Yoshihama ; N. Sato ; S. Saito";Smart contracts, which are widely recognized as key components of blockchain technology, enable automatic execution of agreements. Since each smart contract is a computer program that autonomously runs on a blockchain platform, their development requires much effort and care compared with the development of more common programs. In this paper, we propose a technique to automatically generate a smart contract from a human-understandable contract document that is created using a document template and a controlled natural language (CNL). The automation is based on a mapping from the document template and the CNL to a formal model that can define the terms and condition in a contract including temporal constraints and procedures. The formal model is then translated into an executable smart contract. We implemented a toolchain that generates smart contracts of Hyperledger Fabric from template-based contract documents via a formal model. We then evaluated the feasibility of our approach through case studies of two types of real-world contracts in different domains.;ACCEPTED;ACCEPTED;LOW;28;2019;IBM Journal of Research and Development;;Journal Paper;I can not download the paper from IEEE;https://ieeexplore--ieee--org.us.debiblio.com/document/8645646;;;10.1147/JRD.2019.2900643;0018-8646;;;N;N;N;N;N;Y;N;N;N;;DSL4SC;N;Y;N;N;Y;N;Hyperledger;N;Y;"Natural Language
legal contracts";IBM Research – Tokyo, Tokyo;Y;N;We believe that the automated smart contract generation will be one of the key technologies in the future of blockchain.;"*purchase agreement
*forward accumulator
";N;Y;N; 
413256; Beagle: A new framework for smart contracts taking account of law;52;"Tsai, W.-T. ; Ge, N. ; Jiang, J. ; Feng, K. ; He, J.";This paper presents a new Beagle framework for Smart Contracts (SCs) taking account of law. Different from previous SC development or execution frameworks, this framework takes a practical approach to integrate law into SCs. Instead of translating legal contracts into codes directly, this paper proposes to treat SCs as a key component of legal contracts, use SCs to partially automate the executions of legal contracts, and produce legal evidence during the process. Thus, the proposed SC design will be significantly different from previous SC designs, not in programming languages to be used, but in the way SCs are designed and executed. This Beagle framework has five stages: SC template development from domain analysis, formal SC model and code development from templates, verification and validation (V&V), SC execution, and runtime monitoring. Â© 2019 IEEE.;ACCEPTED;ACCEPTED;LOW;13;2019; 2019 IEEE International Conference on Service-Oriented System Engineering (SOSE);"Blockchains;Formal verification;Law;Smart contracts;Templates;Cloud computing;Formal verification;Robotics;Systems engineering;Blockchains;Code development;Domain analysis;Execution framework;Legal contracts;Runtime Monitoring;Templates;Verification-and-validation;Contracts";Conference paper;"DISCUSSION
TR- No lo tengo claro. Al final el artículo lo que hace es discutir qué se tiene que cambiar en los SC actuales para incorporar aspectos legales, pero no propone ningún lenguajes. Además, Beagle es un framework.	
AV-Aceptamos. Yo creo que si se propone un lenguaje desde el punto de vista de la deficinión de una pantilla y luego su concreción con natural language como se indica en la sección 5. Yo aceptaría como una propuesta que propone un lenguaje de smart contract";https://ieeexplore.ieee.org/document/8705875;;;10.1109/SOSE.2019.00028;9781728114415 (ISBN);;;N;N;N;N;N;Y;N;N;N;;Beagle;N;Y;N;N;Y;N;null;Y;N;Legal contracts;" Digital Society & Blockchain Laboratory, Beihang University, Beijing, China
School of Software, Beihang University, Beijing, China
Emory University School of Law, Atlanta, Georgia 30329, USA
Arizona State University, Tempe, AZ 85287, USA
Beijing Tiande Technologies, Beijing, China
Andrew International Sandbox Institute, Qingdao, China
IOB Laboratory, National Big Data Comprehensive Experimental Area, Guizhou, China";Y;N;"This section discusses five
important issues related to the V&V of SCs:
x What are the differences between SC software and traditional software?
x What are the sources of SC faults?
x What are the SC desirable properties?
x In which stages of SC development should perform V&V by using what methods and tools?
x How can one apply crowdsourcing to SC V&V?

* In cryptocurrency, transactions cannot be reversed. But, in most
countries, transactions can be reversed even few days after trade completion, e.g

* Currently SCs complete transactions without third parties as in
cryptocurrency systems, but this will not be true in financial systems. Under the current law, parties involved must sign legal documents before they become binding. Thus, development and execution of SCs without signatures under the current law will not be legally valid. Not only signatures, numerous transactions today require external legal documents
not available in SCs, e.g., property ownership certificates. These can eventually be digitized too, e.g., they can be issued as digital certificates stored in BCs, but currently they are not, and thus current
SCs must live under the current legal condition.
These should be considered in performing V&V for SCs.

* Once SCs consider the legal aspects, SC design need to make significant changes, and most of changes will be needed in the SC
development and infrastructure. 
";null;N;Y;N; 
413274;Introducing commitRuleML for smart contracts;52;"de Kruijff, J. ; Weigand, H. ; Johannesson P. ; Weigand H. ; Andersson B.";This short paper takes a closer look at the Event Calculus and the formalisms for representing and reasoning about the effects of automated actions and the commitments that result from them. Since the Event Calculus deals with local events and the consideration of time, it enables the uniform representation of basic-, conditional and persistent commitments, including its operations and reasoning rules about them. Due to the similarities between event, action and state processing and reaction rules, we extend KR ReactionRuleML to emphasize syntax and semantics relevant for commitments, called CommitRuleML. CommitRuleML is used to define commitment-based smart contracts (CBSCs) as contracts that logically (through the Event Calculus) define events (on), conditions (if) and actions (do) in an executable language. A simplified running example illustrates how commitments evolve and fulfill over time. Â© 2019 CEUR-WS. All rights reserved.;ACCEPTED;ACCEPTED;LOW;13;2019;Proceedings of the 13th International Workshop on Value Modeling and Business Ontologies;"CommitRuleML;Event Calculus;KR ReactionRuleML;Smart Contracts;Logic programming;Ontology;Semantics;CommitRuleML;Event calculus;Reaction rules;Reasoning rules;Calculations";Workshop paper;;ceur-ws.org/Vol-2383/paper14.pdf ;2383;;;16130073 (ISSN) ;;;N;N;N;N;N;Y;N;N;N;;CommitRuleML;N;Y;N;N;Y;N;n/a;N;Y;Commitment-based Smart contract;Tilburg University;Y;N;"Future research could extend the running example by more complex
use cases that include persistent commitments, partial fulfillments (e.g. payments) and discourse resolution";eCommerce transaction;N;Y;N; 
413285;Smart contracts using blockly: Representing a purchase agreement using a graphical programming language;52;"Weingaertner, T. ; Rao, R. ; Ettlin, J. ; Suter, P. ; Dublanc, P.";This research addresses the issue that in-depth programming knowhow is needed to read and write smart contracts. The goal was making the creation of smart contracts accessible to non-computer experts by the use of a graphical programming language (Blockly). We used modularization to capture the complexity of legal contracts and developed a mapping process to transform the graphical representation to the smart contract programming language Solidity. We applied our approach to legal purchase agreements and proved the practicality of our solution and explored its limitations. A prototype was built to show the feasibility of our approach. Our industry partner challenged the prototype by applying it to the contract creation process. We consider our work as the first step towards an application of smart contracts in the non-IT world and outside the today's expert shaped ecosystem of blockchain specialists. Several continuative research questions have been derived from our finding and are listed at the end of this paper. Â© 2018 IEEE.;ACCEPTED;ACCEPTED;LOW;36;2018; 2018 Crypto Valley Conference on Blockchain Technology (CVCBT);"Blockchain;Blockly;Modularization;Smart contracts;Solidity;Blockchain;Computer graphics;Modular construction;Technology transfer;Blockly;Graphical programming language;Graphical representations;Modularizations;Purchase agreements;Research questions;Smart contracts;Solidity;Ada (programming language)";Conference paper;;https://ieeexplore--ieee--org.us.debiblio.com/document/8525393;;;10.1109/CVCBT.2018.00012;9781538672044 (ISBN);;;N;N;N;N;N;Y;N;N;N;;Smart contracts using Blockly;N;N;Y;N;Y;N;Ethereum;N;Y;legal contracts;"School of Information Technology
Lucerne University of Applied Sciences & Arts";N;Y;"1) Exchange and return: The blockchain stores transaction data irreversibly in a database. In the Swiss Law (OR, Article 40a ff.) the right of withdrawal is clearly regulated. It is also a service of many companies to increase customer satisfaction. Smart contracts have to address this right.

2) Dunning process: In case of late delivery a dunning process has to be installed. A dunning for the payment is not needed since the money is reserved from both partners by entering the contract. Moreover a dunning process for conferment and delivery has to be installed

3) Oracles: Oracles offer a link to functionality outside the blockchain. They can be used for the integration of banking service providers or credit card companies. However, through this integration an advantage of the blockchain is lost as there is a third party, which interacts between the end user and the blockchain.

4) Contract elements: It has been decided for the presented implementation that due to the increasing transaction costs, not all attributes of the contract are mapped in the smart contract. However, as this extension would be closer to practice, this could be further elaborated in another work

5) Crypto-currencies: As long as crypto-currencies are not officially recognized on the market, an intermediate solution with Fiat money should be made possible in order to promote the use of smart contracts. The actual volatility of crypto-currencies is another obstacle for legal contracts

6)  International acceptance: Digitalization progress varies from country to country. It will take some time before a smart contract is internationally accepted. This is a research task for the legal domain";purchase agreement;N;Y;N; 
413298;KEVM: A complete formal semantics of the ethereum virtual machine;52;"Hildenbrandt, E. ; Saxena, M. ; Rodrigues, N. ; Zhu, X. ; Daian, P. ; Guth, D. ; Moore, B. ; Park, D. ; Zhang, Y. ; Stefanescu, A. ; Rosu, G.";A developing field of interest for the distributed systems and applied cryptography communities is that of smart contracts: Self-executing financial instruments that synchronize their state, often through a blockchain. One such smart contract system that has seen widespread practical adoption is Ethereum, which has grown to a market capacity of 100 billion USD and clears an excess of 500,000 daily transactions. Unfortunately, the rise of these technologies has been marred by a series of costly bugs and exploits. Increasingly, the Ethereum community has turned to formal methods and rigorous program analysis tools. This trend holds great promise due to the relative simplicity of smart contracts and bounded-time deterministic execution inherent to the Ethereum Virtual Machine (EVM). Here we present KEVM, an executable formal specification of the EVM's bytecode stack-based language built with the K Framework, designed to serve as a solid foundation for further formal analyses. We empirically evaluate the correctness and performance of KEVM using the official Ethereum test suite. To demonstrate the usability, several extensions of the semantics are presented. and two different-language implementations of the ERC20 Standard Token are verified against the ERC20 specification. These results are encouraging for the executable semantics approach to language prototyping and specification. Â© 2018 IEEE.;ACCEPTED;ACCEPTED;LOW;26;2018;2018 IEEE 31st Computer Security Foundations Symposium (CSF);"blockchain;ethereum;ethereum-virtual-machine;evm;formal-methods;k-framework;kevm;semantics;smart-contract;verification;Blockchain;Computer aided software engineering;Formal methods;Network security;Security systems;Semantics;Verification;Virtual machine;Deterministic execution;ethereum;Executable formal specification;Executable semantics;kevm;Language implementations;Smart contracts;Stack-based languages;Formal specification";Conference paper;;https://ieeexplore.ieee.org/document/8429306;2018-July;;10.1109/CSF.2018.00022;"19401434 (ISSN); 9781538666807 (ISBN)";;;N;N;N;N;N;Y;N;N;N;;K;Y;N;N;N;Y;N;Ethereum;Y;N;Smart contract verification;"University of Illinois at Urbana-Champaign
Runtime Verification, Inc.
Cornell Tech, IC3
East China Normal University";Y;N;"* Future EVM Hardforks:he current semantics is parametric over the selected fee schedule. The EVM will continue to evolve as new opcodes
are added and gas prices are changed, and the specification will need to evolve with it
* Analysis Tools: Another key direction is the formalization of classically known contract antipatterns, specifically
those that have lead to exploits in the past.
* ABI-Level DSL: Currently our ABI-level DSL only supports statically-sized ABI types, but the ABI contains several dynamically sized types as well
*Verified EVM Libraries: To further assist others in building high-assurance contracts, we intend to provide fully verified library contracts.";null;N;Y;N; 
413303;Secure Smart Contract System Built on SMPC over Blockchain;52;"Zhu, Y. ; Song, X. ; Yang, S. ; Qin, Y. ; Zhou, Q.";While smart contracts are praised widely, it should be noted that they have their disadvantages: lack of control over data protection and executive correctness or consistency. Aiming at this problem, we propose SMPC-based smart contract platform with three-layer structure: contract, computing, and group communication layer. In contract layer, we put forward SMPC-based smart contract framework, which gives the implementation process, language structure and grammar specification of smart contracts. In computing layer, fair SMPC algorithms based on general linear secret sharing scheme are designed to implement verifiable collaboration computing with input privacy and computation correctness. In group communication layer, the non-blocking broadcast is developed from non-blocking message passing interface (MPI)in order to ensure secure group communication in asynchronous networks with node and link failures. Finally, the results of simulation experiments with private currency transfers indicate that our platform is efficient and secure enough for common smart contracts. Â© 2018 IEEE.;ACCEPTED;ACCEPTED;LOW;25;2018; 2018 IEEE International Conference on Internet of Things (iThings) and IEEE Green Computing and Communications (GreenCom) and IEEE Cyber, Physical and Social Computing (CPSCom) and IEEE Smart Data (SmartData);"blockchain;non-blocking MPI;secure multi-party computation;smart contract;Blockchain;Internet of things;Message passing;Simulation platform;Asynchronous networks;Implementation process;Linear secret sharing schemes;Message passing interface;Non-blocking;Secure group communications;Secure multi-party computation;Three-layer structures;Green computing";Conference paper;;https://ieeexplore.ieee.org/document/8726574;;;10.1109/Cybermatics_2018.2018.00259;9781538679753 (ISBN);;;N;N;N;N;N;Y;N;N;N;;SMPC;Y;N;N;N;Y;N;null;N;Y;"Security
";"University of Science and Technology Beijing, Beijing, China
Economy and Informatization, Beijing, China";Y;N;"However, there are two disadvantages of security mechanisms in the existing smart contracts: 1) data privacy and 2) executive security

In the aspect of data privacy, smart contract lacks a cryptographic mechanism, which deals with encrypted sensitive
data

In the aspect of executive security, a security mechanism is need to ensure the correctness of performing smart
contract.";transfer smart contract;Y;N;N; 
413305;Formal requirement enforcement on smart contracts based on linear dynamic logic;52;"Sato, N. ; Tateishi, T. ; Amano, S.";Recently, despite the growing popularity of smart contracts, one serious concern is arising among both industry and academia, that is, whether they work autonomously without human intervention really as intended and, when we are not sure, how we can ensure that contracts meet particular requirements. To resolve this, we propose a new formal approach to smart contract development: Instead of defining contracts just as programs in conventional languages, they should be defined using formal logic so that we can verify whether they meet particular requirements and enforce them if necessary. The primary challenge is that expressive formal logic often turns out to be undecidable and consequently executable programs cannot be generated. As a solution, each contract definition is divided into two layers, namely specification layer in a decidable logic called Linear Dynamic Logic for verification and enforcement of requirements and rule layer for defining implementation details, while the consistency between the two layers is systematically guaranteed. Based on this, it also becomes possible to automatically generate executable contract programs from their formal specification, which leads to improving the trustworthiness of contracts. Evaluation on Hyperledger Fabric shows the feasibility and high effectiveness of our approach. Â© 2018 IEEE.;ACCEPTED;ACCEPTED;LOW;14;2018;2018 IEEE International Conference on Internet of Things (iThings) and IEEE Green Computing and Communications (GreenCom) and IEEE Cyber, Physical and Social Computing (CPSCom) and IEEE Smart Data (SmartData);"Blockchain;Dynamics;Formal logic;Formal specification;Green computing;Internet of things;Contract projects;Executable programs;Formal approach;Human intervention;Linear dynamics;Computer circuits";Conference paper;;https://ieeexplore.ieee.org/document/8726750;;;10.1109/Cybermatics_2018.2018.00181;9781538679753 (ISBN);;;N;N;N;N;N;Y;N;N;N;;DSL;N;Y;N;N;Y;N;Hyperledger Fabric;N;Y;Formal specification;IBM Research;Y;N;"Firstly, we plan to take into account multiple contracts interacting with each other.

Secondly, we also plan to formally ensure the refinement/abstraction relations between the code and the non-code parts of a rule.

Thirdly, from a practicality point of view, extending our DSL to supporting contract composition and automatic generation, as discussed in Sec V-C and Sec V-E, is another option.

Finally, for higher efficiency, instead of deriving a statechart from each contract definition, which is a specialization of a rule-set to the contract, we could have different contracts run on a single common (RETE-based) rule engine
";"toggle switch’ contract
Safe Remote Purchase (SRP) contract
SRP Seller and Buyer";Y;N;N; 
413306;ZoKrates-Scalable Privacy-Preserving Off-Chain Computations;52;"Eberhardt, J. ; Tai, S.";Scalability and privacy are two challenges for today's blockchain systems. Processing transactions at every node in the system limits the system's ability to scale. Furthermore, the requirement to publish all corporate or individual information for processing at every node, essentially making the data public, is-despite of all other advantages-often considered a major obstacle to blockchain adoption. In this paper, we make two main contributions to address these two problems: (i)To increase efficiency, we propose a processing model which employs noninteractive proofs to off-chain computations, thereby reducing on-chain computational efforts to the verification of correctness of execution rather than the execution itself. Due to the verifiable computation scheme's zero-knowledge property, private information used in the off-chain computation does not have to become public to verify correctness. (ii)We introduce ZoKrates, a toolbox to specify, integrate and deploy such off-chain computations. It consists of a domain-specific language, a compiler, and generators for proofs and verification Smart Contracts. ZoKrates hides significant complexity inherent to zero-knowledge proofs, provides a more familiar and higher level of programming abstractions to developers and enables circuit integration, hence fostering adoption. Â© 2018 IEEE.;ACCEPTED;ACCEPTED;LOW;10;2018;Proceedings - IEEE 2018 International Congress on Cybermatics: 2018 IEEE Conferences on Internet of Things, Green Computing and Communications, Cyber, Physical and Social Computing, Smart Data, Blockchain, Computer and Information Technology, iThings/GreenCom/CPSCom/SmartData/Blockchain/CIT 2018;"off-chain;privacy;scalability;zkSNARKs;ZoKrates;Blockchain;Data privacy;Internet of things;Problem oriented languages;Scalability;Computational effort;Domain specific languages;Non-interactive proof;Private information;Programming abstractions;Zero knowledge proof;zkSNARKs;ZoKrates;Green computing";Conference paper;;https://ieeexplore--ieee--org.us.debiblio.com/document/8726497;;;10.1109/Cybermatics_2018.2018.00199;9781538679753 (ISBN);;;N;N;N;N;N;Y;N;N;N;;ZoKrates;Y;N;N;N;Y;N;Agnostic approach, although the proof-of-concept has been implemented in Ethereum;Y;N;Blockchain;Information Systems Engineering (ISE) TU Berlin;Y;N;"Scalability and privacy are two challenges for today’s blockchain systems

moving computations from the blockchain to external nodes without compromising its properties is a more challenging problem.";Suduko Verification Example;Y;N;N; 
413321;Writing safe smart contracts in flint;52;Franklin Schrans ;Blockchain-based platforms such as Ethereum support the execution of versatile decentralized applications, known as smart contracts. These typically hold and transfer digital currency (e.g., Ether) to other parties on the platform. Contracts have been subject to numerous attacks, losing hundreds of millions of dollars (in Ether). We propose Flint, a new type-safe, capabilities-secure, contractoriented programming language specifically designed for writing robust smart contracts. To help programmers reason about access control of functions, Flint programmers use caller capabilities. To prevent vulnerabilities relating to the unintentional loss of currency, transfers of assets in Flint are performed through safe atomic operations, inspired by linear type theory. Â© 2018 Copyright held by the owner/author(s).;ACCEPTED;ACCEPTED;LOW;22;2018;Proceeding Programming'18 Companion Conference Companion of the 2nd International Conference on Art, Science, and Engineering of Programming ;"Ethereum;Programming Language;Smart Contracts;Access control;Ethers;Atomic operation;Ethereum;Linear type theory;Smart contracts;Computer programming languages";Report;;https://www.imperial.ac.uk/media/imperial-college/faculty-of-engineering/computing/public/1718-ug-projects/Franklin-Schrans-A-new-programming-language-for-safer-smart-contracts.pdf;;;;;;;N;N;N;N;N;Y;N;N;N;;Flint;Y;N;N;N;Y;N;Ethereum;Y;N;Security;Imperial College London;Y;N;"Protecting against unauthorised function calls.
Safe operations for handling Ether.
Limiting writes to state
Full interoperability with Solidity";"Bank transfer
Auction";Y;N;N; 
413328;Conditional formalization of smart contract using semantic web rule language;52;"Na, S.H. ; An, J.H. ; Yang, J.S. ; Park, Y.B.";As networking technologies evolve, distributed computer technologies such as the cloud are becoming more important. A blockchain is a kind of distributed computer technology in which all nodes have the same ledger to guarantee data integrity. Within a blockchain, smart contract defines the contexts of various items in the form of program code and acts as business logic. However, studies on existing smart contracts do not focus on formalizing rules themselves or managing conditional according to various situations. In this study, we formalize data related to smart contract and propose a method to apply conditional to various situation. This method models data of smart contract using ontology and applies semantic web rule language to conditional and manages rule sets in blockchain network. In this way interoperability of the smart contract type can be ensured and the relationship between the contexts in each transaction can be inferred by linking the ontology reasoner to the blockchain network. We describe the smart contract applying the semantic web rule language and show how to actually operate within the blockchain network through the program example. Â© Medwell Journals, 2018.;ACCEPTED;ACCEPTED;LOW;36;2018;Journal of Engineering and Applied Sciences;"Blockchain;Ontology;Ontology;Smart contract;SWRL;Technologies";Journal Paper;;http://medwelljournals.com/abstract/?doi=jeasci.2018.8716.8721;13;8716-8721;10.3923/jeasci.2018.8716.8721;1816949X (ISSN) ;;;N;N;N;N;N;Y;N;N;N;;null;N;Y;N;N;Y;N;n/a;N;Y;"ontology
";Dankook University;Y;N;"Blockchain ontology automatically from metadata of blockchain
User-friendly generation of SWRL";null;Y;N;N; 
413341;Towards adding variety to simplicity;52;"Valliappan, N. ; Mirliaz, S. ; Lobo Vesga, E. ; Russo, A. ; Margaria T. ; Steffen B.";Simplicity is a Turing-incomplete typed combinator language for smart contracts with a formal semantics. The design of Simplicity makes it possible to statically estimate the resources (e.g., memory) required to execute contracts. Such a feature is highly relevant in blockchain applications to efficiently determine fees to run smart contracts. Despite being Turing incomplete, the language is capable of expressing non-trivial contracts. Often, Simplicity programs contain lots of code repetition that could otherwise be avoided if it had common programming languages features, such as local definitions, functions, and bounded loops. In this work, we provide the foundations to make Simplicity a richer language. To achieve that, we connect Simplicityâ€™s primitives with a categorical model. By doing so, we lift the language to a more abstract representation that will allow us to extend it by leveraging category theory models for computations. This methodology facilitates the addition of local definitions, functions, and bounded loops. We provide an implementation of Simplicity and its virtual machine in the functional programming language Haskell. Â© Springer Nature Switzerland AG 2018.;ACCEPTED;ACCEPTED;LOW;28;2018;"International Symposium on Leveraging Applications of Formal Methods
ISoLA 2018: Leveraging Applications of Formal Methods, Verification and Validation. Industrial Practice ";"Blockchain;Category theory;Functional programming;Haskell;Simplicity;Smart contracts;Blockchain;Formal methods;Semantics;Abstract representation;Categorical model;Category theory;Formal Semantics;Haskell;Non-trivial;Simplicity;Smart contracts;Functional programming";Conference paper;;https://link--springer--com.us.debiblio.com/chapter/10.1007/978-3-030-03427-6_31;11247 LNCS;414-431;https://doi.org/10.1007/978-3-030-03427-6_31;"03029743 (ISSN); 9783030034269 (ISBN)";;;N;N;N;N;N;Y;N;N;N;;eDSL Simplicity?;N;Y;N;N;Y;N;Ethereum Bitcoin?;N;Y;null;Chalmers University of Technology, Gothenburg, Sweden;Y;N;Simplicity programs contain lots of code repetition that could otherwise be avoided if it had common programming languages features, such as local definitions, functions, and bounded loops.;null;N;Y;N; 
420753;Pluralize: a Trustworthy Framework for High-Level Smart Contract-Draft;53;"Dargaye, Z ; Pozzo, A ; Tucci-Piergiovanni, S";The paper presents Pluralize a formal logical framework able to extend the execution of blockchain transactions to events coming from external oracles, like external time, sensor data, human-made declarations, etc. These events are by essence non-reliable, since transaction execution can be triggered by information whose veracity cannot be established by the blockchain. To overcome this problem, the language features a first-order logic and an authority algebra to allow formal reasoning and establish accountability of agents for blockchain-enabled transactions. We provide an accountability model that allows to formally prove the accountability of agents by a formal proof locally executable by each agent of the blockchain.;ACCEPTED;ACCEPTED;LOW;5;2018;CoRR;;arXiv;;https://arxiv.org/abs/1812.05444;;;;;;;N;N;N;N;N;Y;N;N;N;;Plurality;N;Y;N;N;Y;N;null;Y;N;Transactions on blockchain;CEA, LIST, PC 174, Gif-sur-Yvette, 91191, France;Y;N;"In many industrial applications smart contracts react to information coming from external sources (sensors, human interfaces, other applications), often called oracles in the blockchain jargon, which amplifies their vulnerability.

The main challenge for smart contracts is to extend the Bitcoin paradigm to guards whose evaluation that are not closed to the blockchain, going far beyond the simple semantics of Bitcoin scripts and matching
requirements of most industrial applications. 

As future work we envisage to generate dynamic monitors for claimed guards. Monitors will be embedded in the run-time environment of the language for run-time identification of conflicts.

Another important future work is to increase the expressivity of Plurality for ownership transfers.
First, transfer have to be generalized to heterogeneous tokens thanks to a token algebra. Second, the
validation mechanism has to handle the validation of smart contract computational guards.";"The Fair Pocket Money.
The Studious Pocket Money.
The evidential Pocket Money.
The Competitive Pocket Money.
";Y;N;N; 
420765;Unibright-the unified framework for blockchain based business integration;53;"S. Schmidt, M. Jung, T. Schmidt, I. Sterzinger, G. Schmidt, M. Gomm, K. Tschirschke, T. Reisinger,
F. Schlarb, D. Benkenstein, B. Emig";he  purpose  of  Unibright  is  to  leverage  the  promises  of  blockchaintechnology for all those driving business.  Unibright is a unified frameworkfor blockchain-based business integration.Unibright  establishes  a  template  based,  visual  definition  of  businessintegration  workflows  and  serves  with  automatic  smart  contract  gener-ation.   The  Unibright  framework  wants  to  enable  cross-blockchain  andcross-system connections and provides all system components to supporta blockchain-based business integration process.This whitepaper points out the benefits of using blockchain technol-ogy in the field of business integration, and what unsolved issues can beaddressed thereby.  It shows why a unifying framework like Unibright ismandatory to turn all these benefits to account and evolves the details ofthe Unibright concept.;ACCEPTED;ACCEPTED;LOW;0;2018;Unibright Project Whitepaper;;White paper;;https://www.unibright.io/download/Unibright_Whitepaper.pdf;;;;;;;N;N;N;N;N;Y;N;N;N;;Unibright Contract Interface;N;Y;N;N;Y;N;Agnostic, although the current implementation is in Solidity;Y;N;Business Integration;Unibright.io;N;Y;To benefit from the promises the blo ckchain offers, we need a concept that allows us to integrate sp ecific blo ckchain technologies into existing IT- and business integration landscapes;"Get Quotation for Material
Product Pass Approval.
Shipping Process Monitoring 
Tracking of resources during a production process
Invoice release
Aircraft Pro duction History
New Hire 
Insurance claim processing
Milestone based project payment";N;Y;N; 
420784;Katal: A standard framework for finance;53;"FranÃ§a, B ; Radermacher, S ; Trinkler, R";Katal is a new blockchain that provides a standard way to build and deploy decentralized financial applications. It brings together all the components necessary for the backend of a financial application, namely: a high-performance consensus, an authenticated data feed system, a standard for financial contracts and connectivity to the rest of the blockchain ecosystem. Katal enables and simplifies the creation of financial services that are non-custodial, trustless, fast, convenient and interoperable. ;ACCEPTED;ACCEPTED;LOW;0;2019;CoRR;;arXiv;;https://arxiv.org/abs/1903.01600;;;;;;;N;N;N;N;N;Y;N;N;N;;ACTUS;Y;N;N;N;Y;N;Katal;Y;N;Finance;Trinkler Software;N;Y;null;null;N;Y;N; 
519577;ZF* Documentation;56;A.L. Manning;;ACCEPTED;ACCEPTED;LOW;0;2017;;;WebSite;;https://docs.zenprotocol.com/zf;;;;;07/22/2019;;N;N;N;N;N;Y;N;N;N;;ZF*;N;Y;N;N;Y;N;Zen Protocol;N;Y;Financial products, security;Zen Protocol;N;Y;null;null;Y;N;N; 
527200;Aeternity documentation;60;aethernity workgroup;;ACCEPTED;ACCEPTED;LOW;0;2018;;;Website;"Look at the sophia language http://aeternity.com/documentation-hub/aesophia/

https://github.com/aeternity/protocol/blob/master/contracts/sophia.md";https://aeternity.com/;;;;;07/22/2019;;N;N;N;N;N;Y;N;N;N;;ASophia;Y;N;N;N;Y;N;aeternity;Y;N;Blockchain;AEternity;N;Y;null;"simple crowd-funding
tic tac toe
crypto hamster
smart data provider
smart real state
";Y;N;N; 
527202;IELE Semantics;60;Everett Hildenbrandt, Dwight Guth;"IELE is a variant of LLVM specialized to execute smart contracts on the blockchain. Its design, definition and implementation have been done at the highest mathematical standards, following a semantics-first approach with verification of smart contracts as a major objective. Specifically, we have defined the formal syntax and semantics of IELE using the K framework, which in return gives us an executable reference model in addition to a series of program analysis tools, including a program verifier. K was created by our team during the last 15 years and incorporates the state of the art in language design, semantics and formal methods. The design of IELE was based on our experience with formally defining dozens of languages in K, but especially on recent experience and lessons learned while formally defining two other virtual machines in K, namely:

    KEVM, our semantics of the Ethereum Virtual Machine (EVM); and
    KLLVM, our semantics of LLVM; the latest version of the LLVM semantics will be made public when complete and published, but an earlier version is available.

Unlike the EVM, which is a stack-based machine, IELE is a register-based machine, like LLVM. It has an unbounded number of registers and also supports unbounded integers. To get a feel for how IELE programs look like, here are two of them (these have not been verified yet and may change):

    erc20.iele - a IELE implementation of an ERC20 token
    forwardingWallet.iele - a wallet implementation that creates and calls into another contract
";ACCEPTED;ACCEPTED;LOW;0;2018;;;Website;"K extension
https://runtimeverification.com/blog/iele-a-new-virtual-machine-for-the-blockchain/";https://github.com/runtimeverification/iele-semantics;;;;;07/22/2019;;N;N;N;N;N;Y;N;N;N;;IELE;Y;N;N;N;Y;N;IELE;N;Y;Virtual Machine;Runtime Verification Inc.;N;Y;"Efficient backend for K.
Compilers/Translators from Solidity and Plutus to IELE
Semantics-based compilation
Deploy IELE on the Cardano blockchain.";"simple open auction contract;
forwarding wallet contract.
";Y;N;N; 
527207;NEO White paper;62;NEO Team;;ACCEPTED;ACCEPTED;LOW;0;2018;;;White paper;"Just in case
DISCUSSION
TR-Neo es el blockchain. Los SmartContract se implementan en cualquier lenguaje de programación general tal y como Java, C#, …. Para implementar un smart contract hay que usar una API. No he encontrado el lenguaje de la NEOVM	
AV-Aceptamos. Creo que NEO Contract es una fachada/interface para definición de smart contracts en NEO blockchain";https://docs.neo.org/docs/en-us/basic/whitepaper.html;;;;;07/22/2019;;N;N;N;N;N;Y;N;N;N;;"NEO smart contracts?
 .NET Framework , Java framework and its respective compiler will be released within a few months. In the future, we will also support Python, C/C++, and Go.

* C# / VB.Net / F#, Visual Studio
* Java / Kotlin, Eclipse
* C / C++ / GO
* JavaScript / TypeScript
* Python / Ruby";Y;N;N;N;Y;N;Neo;Y;N;Smart Economy;NEO Smart Ecnonomy;N;Y;null;"Decentralized Applications
    Smart fund
    AI-assisted legal smart contract
    Social networking
    Automated tokens liquidity providers
    Decentralized exchange
    Secure communication protocol
    Data exchange market
    Intellectual property trading market
    Prediction market
    Advertising market
    Hashpower market
    NeoGas market";Y;N;N; 
527216;cicero;65;Accord Project Technology Working Group;;ACCEPTED;ACCEPTED;LOW;0;2018;;;GitHub page;;https://github.com/accordproject/cicero;;;;;07/22/2019;;N;N;N;N;N;Y;N;N;N;;Cicero;N;Y;N;N;Y;N;Agnostic (see https://www.accordproject.org/);Y;N;legal contracts;Accord Project;N;Y;null;null;N;Y;N; 
550277;Ergo Language Guide;67;Accord Project;;ACCEPTED;ACCEPTED;LOW;0;2019;;;Website;https://docs.accordproject.org/docs/ergo.html#design-choices;https://docs.accordproject.org/docs/logic-ergo.html;;;;;07/23/2019;;N;N;N;N;N;Y;N;N;N;;Ergo;N;Y;N;N;Y;N;Agnostic;Y;N;Legal contracts;Accord Project;N;Y;The currently compiler targets JavaScript (either standalone or for use in Cicero Templates and Hyperledger Fabric) and Java (experimental);null;Y;N;N; 
573430;Zether: Towards Privacy in a Smart Contract World;71;"Benedikt B{\""u}nz and Shashank Agrawal and Mahdi Zamani and Dan Boneh";"Blo ckchain-based s mart contract platforms like Ethereum have b ecome quite p opular
as a way to remove trust and add transparency to distributed applications. While different
typ es of imp ortant applications can b e easily built on such platforms, there do es not seem
to b e an easy way to add a meaningful level of privacy to them.
In this pap er, we prop ose Zether, a fully-decentralized, confidential payment mechanism
that is compatible with Ethereum and other smart contract platforms. We take an accountbased approach similar to Ethereum for efficiency and usability. We design a new smart
contract that keeps the account balances encrypted and exposes methods to deposit,
transfer and withdraw funds to/from accounts through cryptographic proofs.
We describe techniques to protect Zether against replay attacks and front-running
situations. We also develop a mechanism to enable interoperability with arbitrary smart
contracts. This helps to make several popular applications like auctions, payment channels,
voting, etc. confidential.
As a part of our protocol, we propose ?-Bullets, an improvement of the existing zeroknowledge proof system, Bulletproofs. ?-Bullets make Bulletproofs more inter-operable
with Sigma protocols, which is of general interest.
We implement Zether as an Ethereum smart contract and show the practicality of our
design by measuring the amount of gas used by the Zether contract. A Zether confidential
transaction costs about 0.014 ETH or approximately $1.51 (as of early Feb, 2019). We
discuss how small changes to Ethereum, which are already being discussed independently
of Zether, would drastically reduce this cost";ACCEPTED;ACCEPTED;LOW;5;2019;;;white paper;"TR- Tengo dudas, creo que Zether es un mecanismo de pago, que está implementado con blockchain, vamos un smart contract implementado en Ethereum, pero no un lenguajeWe implement Zether as an Ethereum smart contract and show the practicality of our design by measuring the amount of gas used by the Zether contract.	

AV-Aceptamos. Yo creo que si es una nueva propuesta, es verdad que se presenta todo el protocolo Zether aplicado a un sistema de pago como caso de uso, pero se hace foco en la especificación de Zether Smart Contract (section 3.1)";https://crypto.stanford.edu/~buenz/papers/zether.pdf;;;;;07/23/2019;;N;N;N;N;N;Y;N;N;N;;Zether smart contract (ZSC);N;Y;N;N;Y;N;Ethereum;Y;N;Privacy;"Stanford University
Visa Research
";Y;N;null;"Sealed-bid Auctions
Payment Channels
Stake Voting
Privacy-preserving Proof-of-Stake";Y;N;N; 
573431;ACTUS: The algorithmic representation of financial contracts;72;Nils Bundi;;ACCEPTED;ACCEPTED;LOW;0;2018;;;White paper;"https://www.actusfrf.org/
https://github.com/actusfrf
finantial contracts taxonomy			https://www.actusfrf.org/taxonomy		
https://github.com/actusfrf/actus-techspecs/blob/master/actus-techspecs.pdf";https://docs.wixstatic.com/ugd/3df5e2_eceb16e5f7f14d11903a6412aebb9e4a.pdf;;;;;07/23/2019;;N;N;N;N;N;Y;N;N;N;;ACTUS;N;Y;N;N;Y;N;Katal;Y;N;Legal/Financial;ACTUS FINANCIAL RESEARCH FOUNDATION;Y;N;"Current limitations of smart contract on blockchain https://drive.google.com/file/d/1CRdQeMyu4z0yTh87tRleD8KmQLQLW1d4/view
1) Trusted off-chain information (Oracles)
2) Legal-aspects fusion of legal contracts and smart contracts just-started";null;N;Y;N; 
586320;A Model-Driven Approach to Smart Contract Development;74;Boogaard, K.;Blockchain technology has provided a platform for the decentralized execution of smart contracts. A smart contract is an agreement that is automatically executed when certain conditions have been met. The immutability, decentral nature, and consensus mechanisms that are characteristic to blockchain technology make the smart contract and its development cycle a new field of study in software engineering. A novel economic and defensive thinking is needed to develop workable, secure smart contracts. Motivated by the need for a novel approach to development, this thesis proposes a model-driven approach to smart contract development. Model-Driven Engineering (MDE) is an approach to information system development in which models and model technologies are applied to raise the level of abstraction at which developers create and evolve software, with the goal of both simplifying and formalizing the various activities and tasks that comprise the Software Development Life Cycle (SDLC). Model-Driven Architecture (MDA) is a framework for this approach. This thesis aims to apply this framework to create a method which describes the development phase from domain knowledge to smart contract foundation. The creation of a method has two main aims, namely (i) to bridge the semantic gap between domain knowledge and smart contract by lowering the threshold for domain experts, and (ii) support developers in creating less vulnerable smart contracts that accurately represent the problem domain. This is done by constructing a model-driven method based on existing research that applies MDE to smart contract development. A literature study into this field yields the requirements and techniques for the method, which is consequently constructed based on these requirements and techniques. The method is evaluated in twofold. First, the value is assessed through a case study, which shows that the developer benefits from a structured approach and the reduction of manual programming. Second, by an experiment which shows that people are better able to comprehend and communicate about models containing functional aspects of the smart contract if a computational independent model is included. By doing so it fulfills the aim of lowering the threshold for domain experts to participate in the smart contract development cycle.;ACCEPTED;ACCEPTED;LOW;5;2018;;Smart Contracts, Model-driven, Model-Driven Engineering, Ethereum, Software Engineering, Blockchain, Development, Model-Driven Architecture, Finite State Machine;Master Thesis;ADICO extension;https://dspace.library.uu.nl/handle/1874/365596;;;;;07/23/2019;;N;N;N;N;N;Y;N;N;N;;null;N;N;N;Y;Y;N;Ethereum;N;Y;model-driven development;Utrecht University;Y;N;"smart contracts are hard to develop and many of the
deployed contracts have security vulnerabilities.
There are numerous problems surrounding the relatively novel field of smart contract
development and these problems are fairly diverse in nature. There is no easy way to
pinpoint at which phase of the development the problems are nested. As stated in the
problem statement, the problems range from the transformation of the domain
knowledge to the developers coding vulnerable smart contracts

. Research into blockchain and smart contracts is partly nested
in academia, but for a large part it is done in an online open-source setting in which willing participants contribute and build upon the work of others without the need for extensive documentation.";null;N;Y;N; 
586322;OpenLaw Documentation;75;Aaron Wright, David Roon, and ConsenSys AG;;ACCEPTED;ACCEPTED;LOW;0;2019;;;Website;"A contract can be created via OpenLaw. Once the agreement is signed, a cryptographic hash of the agreement will be created and recorded to the Ethereum blockchain. In other words, using OpenLaw, any Ethereum smart contract can be embedded into a legal agreement in a few lines and automatically triggered once the agreement is digitally signed by all parties.

https://www.thomsonreuters.com/en/press-releases/2019/october/thomson-reuters-and-openlaw-combine-blockchain-driven-smart-contracts-with-document-automation-technology.html";https://docs.openlaw.io/;;;;;07/23/2019;;N;N;N;N;N;Y;N;N;N;;OpenLaw;Y;N;N;N;N;Y;Agnostic;Y;N;Legal contracts;OpenLaw;N;Y;null;null;N;Y;N; 
679285;BALZaC. Bitcoin Abstract Language, analyZer and Compiler;77; N. Atzei, M. Bartoletti, T. Cimoli, S. Lande, R. Zunino;;ACCEPTED;ACCEPTED;LOW;5;2018;;;WebSite;;https://blockchain.unica.it/balzac/docs/;;;;;09/17/2019;;N;N;N;N;N;Y;N;N;N;;Balzac;Y;N;N;N;Y;N;Bitcoin;Y;N;Verification;Blockchain@Unica group of the University of Cagliari.;Y;N;null;null;Y;N;N; 
699954;fi - smart coding for smart contracts;-1;Stephen Andrews;;ACCEPTED;ACCEPTED;LOW;5;2018;;;Website;"https://github.com/TezTech/fi-compiler
";https://learn.fi-code.com/;;;;;09/18/2019;;N;N;N;N;N;Y;N;N;N;;fi;Y;N;N;N;Y;N;Tezos;Y;N;null;TezTech Labs;N;Y;null;null;Y;N;N; 
699955;Introducing LIGO: a new smart contract language for Tezos;-1;Gabriel Alfour;"LIGO is a statically typed high-level smart-contract language that compiles down to Michelson. It seeks to be easy to use, extensible and safe.
LIGO is a programming language that aims to provide developers with an uncomplicated and safer way to implement smart-contracts. LIGO is currently being implemented for the Tezos blockchain and as a result, it compiles down to Michelson - the native smart-contract language of Tezos.

    Smart-contracts are programs that run within a blockchain network.

LIGO was initially meant to be a language for developing Marigold, on top of a hacky framework called Meta-Michelson. However, due to the attention received by the Tezos community, a decision has been put into action to develop LIGO as a standalone language that will support Tezos directly as well.
";ACCEPTED;ACCEPTED;LOW;37;2019;;;Blog;"https://ligolang.org/
";https://medium.com/tezos/introducing-ligo-a-new-smart-contract-language-for-tezos-233fa17f21c7;;;;;09/18/2019;;N;N;N;N;N;Y;N;N;N;;LIGO;Y;N;N;N;Y;N;Tezos;Y;N;null;Marigold;N;Y;null;null;Y;N;N; 
730952;Smart contracts and trust contracts: part 3;78;BOScoin;;ACCEPTED;ACCEPTED;LOW;0;2017;;;Blog;"https://medium.com/@boscoin/smart-contracts-trust-contracts-part-3-6cf76bf5882e
https://boscoin.io/wp-content/themes/boscoin/src/pdf/BOScoinWhitePaper_2.0_EN.pdf
https://boscoin.io/
https://coinswitch.co/info/boscoin/what-is-boscoin";https://boscoin.io/wp-content/themes/boscoin/src/pdf/BOScoinWhitePaper_2.0_EN.pdf;;;;;09/29/2019;;N;N;N;N;N;Y;N;N;N;;Trust Contract;Y;N;N;N;Y;N;BOScoin;Y;N;Finance;BlockchainOS Inc;N;Y;null;"public financing
congress voting";Y;N;N; 
730955;Write your next Ethereum Contract in Pyramid Scheme;79;Michael Burge;;ACCEPTED;ACCEPTED;LOW;0;2017;IDEALS. Illinois Digital Environment for Access to Learning and Scholarship;;White paper;"https://medium.com/coinmonks/write-your-next-ethereum-contract-in-pyramid-scheme-6b6e4deadf2f
https://medium.com/coinmonks/dsls-for-ethereum-contracts-380136177abd
https://github.com/MichaelBurge/pyramid-scheme";https://medium.com/coinmonks/write-your-next-ethereum-contract-in-pyramid-scheme-6b6e4deadf2f;;;;;09/29/2019;;N;N;N;N;N;Y;N;N;N;;Pyramid;Y;N;N;N;Y;N;Ethereum;N;Y;null;Michael Burge;N;Y;null;null;Y;N;N; 
730956;EthIR: A Framework for High-Level Analysis of Ethereum Bytecode;79;Elvira Albert andPablo Gordillo andBenjamin Livshits andAlbert Rubio andIlya Sergey;;ACCEPTED;ACCEPTED;LOW;0;2018;Automated Technology for Verification and Analysis - 16th InternationalSymposium, {ATVA} 2018, Los Angeles, CA, USA, October 7-10, 2018,Proceedings;;Conference paper;;https://doi.org/10.1007/978-3-030-01090-4\_30;11138;513--520;10.1007/978-3-030-01090-4\_30;;09/29/2019;;N;N;N;N;N;Y;N;N;N;;Rule Based Representation (RBR);N;N;Y;N;Y;N;Ethereum;Y;N;Bytecode analysis;Universidad Complutense Madrid;Y;N;null;Bounding loops;Y;N;N; 
730957;IELE: An intermediate level Blockchain language designed and implemented using formal semantics;79;Theodoros Kasampalis and Dwight Guth and Brandon Moore and Traian Serbanuta and Virgil Serbanuta and Daniele Filaretti and Grigore Rosu and  Ralph Johnson;Most languages are given an informal semantics until they are implemented, so the formal semantics comes later. Consequently, there are usually inconsistencies among the informal semantics, the implementation, and the formal semantics. IELE is an LLVM-like language for the blockchain that was specified formally and its implementation, a virtual machine, generated from the formal specification. Moreover, its design was based on problems observed formalizing the semantics of the Ethereum Virtual Machine (EVM) and from formally specifying and verifying EVM programs (also called “smart contracts”), so even the design decisions made for IELE are based on formal specifications. A compiler from Solidity, the predominant high-level language for smart contracts, to IELE has also been implemented, so Ethereum contracts can now also be executed on IELE. The virtual machine automatically generated from the semantics of IELE is shown to be competitive in terms of performance with the state of the art and hence can stand as the de facto implementation of the language in a production setting. Indeed, IOHK, a major blockchain company, is currently experimenting with the IELE VM in order to deploy it as its computational layer in a few months. This makes IELE the first practical language that is designed and implemented as a formal specification. It took only 10 man-months to develop IELE, which demonstrates that the programming language semantics field has reached a level of maturity that makes it appealing over the traditional, adhoc approach even for pragmatic reasons.;ACCEPTED;ACCEPTED;LOW;5;2018;;;Report;;https://www.ideals.illinois.edu/handle/2142/100320;;;;;09/29/2019;;N;N;N;N;N;Y;N;N;N;;IELE;Y;N;N;N;N;Y;Agnostic;Y;N;null;Runtime Verification, Inc;N;Y;null;null;N;Y;N; 
730958;Ethereum flavored WebAssembly (ewasm);79;Alex Beregszaszi and Norton Wang and Guillaume Ballet and Hugo and Jake Lang and jwasinger and Lane Rettig and wanderer;;ACCEPTED;ACCEPTED;LOW;0;2019;;;GitHub page;;https://github.com/ewasm/design;;;;;09/29/2019;;N;N;N;N;N;Y;N;N;N;;ewasm;Y;N;N;N;Y;N;Ethereum;Y;N;null;null;Y;N;null;null;Y;N;N; 
790567;IELE: A Rigorously Designed Language and Tool Ecosystem for the Blockchain;80;Kasampalis, Theodorosand Guth, Dwightand Moore, Brandonand È˜erb{\u{a}}nuÈ›{\u{a}}, Traian Florinand Zhang, Yiand Filaretti, Danieleand È˜erb{\u{a}}nuÈ›{\u{a}}, Virgiland Johnson, Ralphand Ro{\c{s}}u, Grigore;This paper proposes IELE, an LLVM-style language, together with a tool ecosystem for implementing and formally reasoning about smart contracts on the blockchain. IELE was designed by specifying its semantics formally in the K framework. Its implementation, a IELE virtual machine (VM), as well as a formal verification tool for IELE smart contracts, were automatically generated from the formal specification. The automatically generated formal verification tool allows us to formally verify smart contracts without any gap between the verifier and the actual VM. A compiler from Solidity, the predominant high-level language for smart contracts, to IELE has also been (manually) implemented, so Ethereum contracts can now also be executed on IELE.;ACCEPTED;ACCEPTED;LOW;23;2019;"International Symposium on Formal Methods
FM 2019: Formal Methods – The Next 30 Years pp";;Conference paper;"Definitely yes
Note: I think the approach is supported by industry because of the following statement:
We have deployed the IELE VM in a testnet supported by IOHK, a major blockchain company [16]

We believe that the novelty in the design of IELE, compared to those efforts, stems from the fact that its formal specification and its de-facto implementation are one and the same artifact: any change to IELE’s specification is automatically propagated to the implementation of the language execution engine and verification tools.

CHECK: Decide if it is industrial or not
";https://doi.org/10.1007/978-3-030-30942-8_35;11800;593--610;https://doi.org/10.1007/978-3-030-30942-8_35;978-3-030-30942-8;05/26/2020;;N;N;N;N;N;Y;N;N;N;;IELE;Y;N;N;N;Y;N;Ethereum??;Y;N;"security, verification, human-readability, and portability in mind
VM Level.";"University of Illinois at Urbana-Champaign, Urbana, 
Runtime Verification, Urbana, USA
University of Bucharest, Bucharest, Romania";N;Y;"security, verification, human-readability, and portability in mind

We believe that the novelty in the design of IELE, compared to those efforts, stems from the fact that its formal specification and its de-facto implementation are one and the same artifact: any change to IELE’s specification is automatically propagated to the implementation of the language execution engine and verification tools.
";null;Y;N;N; 
790573;A Minimal Core Calculus for Solidity Contracts;80;Bartoletti, Massimoand Galletta, Letterioand Murgia, Maurizio;The Ethereum platform supports the decentralized execution of smart contracts, i.e. computer programs that transfer digital assets between users. The most common language used to develop these contracts is Solidity, a Javascript-like language which compiles into EVM bytecode, the language actually executed by Ethereum nodes. While much research has addressed the formalisation of the semantics of EVM bytecode, relatively little attention has been devoted to that of Solidity. In this paper we propose a minimal calculus for Solidity contracts, which extends an imperative core with a single primitive to transfer currency and invoke contract procedures. We build upon this formalisation to give semantics to the Ethereum blockchain. We show our calculus expressive enough to reason about some typical quirks of Solidity, like e.g. re-entrancy.;ACCEPTED;ACCEPTED;LOW;12;2019;Data Privacy Management, Cryptocurrencies and Blockchain Technology;"Ethereum; Smart contracts; Solidity ";Conference paper;"Dudoso: "" In this paper we propose a minimal calculus for Solidity contracts, which extends an imperative core with a single primitive to transfer currency and invoke contract procedures ...""";https://link--springer--com.us.debiblio.com/chapter/10.1007/978-3-030-31500-9_15;11737;233--243;https://doi.org/10.1007/978-3-030-31500-9_15 ;978-3-030-31500-9;05/26/2020;;N;N;N;N;N;Y;N;N;N;;TinySol;Y;N;N;N;Y;N;null;Y;N;"formalization
";Universit`a Degli Studi di Cagliari, Cagliari, Italybart@unica.it2IMT Lucca, Lucca, Italy3Universit`a di Trento, Trento, Italy;Y;N;null;null;Y;N;N; 
790601;A Three-Layered Approach for Designing Smart Contracts in Collaborative Processes;80;Bagozi, Adaand Bianchini, Devisand De Antonellis, Valeriaand Garda, Massimilianoand Melchiori, Michele;"In collaborative environments, where enterprises interact each other's without a centralised authority that ensures trust among them, the ability of providing cross-organisational services must be enabled also between mutually untrusting participants. Blockchain platforms and smart contracts have been proposed to implement collaborative processes. However, current solutions are platform-dependent and deploy on-chain the whole process, thus increasing the execution costs of smart contracts if deployed on permissionless blockchain. In this paper, we propose an approach that includes criteria to identify trust-demanding objects and activities in collaborative processes, a model to describe smart contracts in a platform-independent way and guidelines to deploy them in a blockchain. To this aim, a three-layered model is used to describe: (i) the collaborative process, represented in BPMN, where the business expert is supported to add annotations that identify trust-demanding objects and activities; (ii) Abstract Smart Contracts based on trust-demanding objects and activities only and specified by means of descriptors, that are independent from any blockchain technology; (iii) Concrete Smart Contracts, that implement abstract ones and are deployed over a specific blockchain, enabling the creation of a repository where a single descriptor is associated with multiple implementations. The flexibility and reduced costs of the approach, due to the smart contracts abstraction and the use of blockchain only when necessary, are discussed with a case study on remote monitoring services in the digital factory.";ACCEPTED;ACCEPTED;LOW;23;2019;"OTM Confederated International Conferences ""On the Move to Meaningful Internet Systems""
OTM 2019: On the Move to Meaningful Internet Systems: OTM 2019 Conferences ";"Blockchain;Smart contract;Collaborative processes ";Conference paper;Abstract Smart Contracts(ASC) maybe the intermediate models could be considered.;https://doi.org/10.1007/978-3-030-33246-4_28;;440--457;https://doi.org/10.1007/978-3-030-33246-4_28;978-3-030-33246-4;05/26/2020;;N;N;N;N;N;Y;N;N;N;;Abstract Smart Contracts(ASC).;N;Y;N;N;N;Y;null;Y;N;null;Department of Information Engineering, University of Brescia, Italy;Y;N;null;null;Y;N;N; 
790630;Towards Self-automatable and Unambiguous Smart Contracts: Machine Natural Language;80;Qin, Pengand Guo, Jingzhiand Shen, Bingqingand Hu, Quanyi;A smart contract originally drafted by natural language is an essential task of many applications in blockchain technology. Firstly, natural language cannot be directly executed by computers, self-executing requires terms of the smart contract be computer-readable and executable. Secondly, in crossing environments or parties, contract translation needs the overall meaning of a sentence to have a meticulous precision, besides, low tolerance of mistakes for reducing a tedious process. Lastly, many kinds of templates of smart contracts need a common sense of agreement where each party agrees on the context of the contract. This paper explores the problems of the smart contract in natural language and self-executing to redefine the smart contract through an approach, which supports a human-readable, computer-understandable and self-executable contract representations with enabling semantic structural based on Machine Natural Language (MNL). Meanwhile, a common dictionary (CoDic) transfers natural languages into universal machine codes or languages without the ambiguity across parties.;ACCEPTED;ACCEPTED;LOW;43;2020;Advances in E-Business Engineering for Ubiquitous Computing;"Machine natural language; Smart contracts; Semantic document; Universal grammar ";Conference Paper;They propopse Machine Natural language (MNL) a language very close to natural language and they say it is autoexecutable.;https://doi.org/10.1007/978-3-030-34986-8_34;41;479--491;https://doi.org/10.1007/978-3-030-34986-8_34;978-3-030-34986-8;05/26/2020;;N;N;N;N;N;Y;N;N;N;;Machine Natural language (MNL);N;Y;N;N;Y;N;null;Y;N;null;Faculty of Science and Technology, University of Macau, Macau, China;Y;N;null;null;Y;N;N; 
790671;Das Contract - A Visual Domain Specific Language for Modeling Blockchain Smart Contracts;80;Skotnica, Marekand Pergl, Robert;A Blockchain (BC) is a technology that introduces a decentralized, replicated, autonomous, and secure databases. A smart contract (SC) is a transaction embedded in the blockchain that contains executable code and its internal storage, offering immutable execution and record keeping. The SC has enormous potential in automating traditional paper contracts and encoding contract logic into program code. Thus, replacing the role of a notary and a central authority. It may dramatically reduce an effort with administration workload and enforcement of such contracts. In this paper, we propose a new visual domain specific language that can capture the SC in a user-friendly way and eliminate the errors associated with programming since the SC code is automatically generated from models. Finally, an open-source proof-of-concept environment for designing and generating the SC is introduced to demonstrate the feasibility of proposed concepts.;ACCEPTED;ACCEPTED;LOW;16;2020;"Enterprise Engineering Working Conference
EEWC 2019: Advances in Enterprise Engineering XIII";"Enterprise Engineering; DEMO methodology; Blockchain; Smart contract";Conference paper;;;;149--166;https://doi.org/10.1007/978-3-030-37933-9_10;978-3-030-37933-9;05/26/2020;;N;N;N;N;N;Y;N;N;N;;Das Contract;Y;N;N;N;Y;N;Agnostic, although the proof of concept is made with Ethereum Solidity.;Y;N;null;null;Y;N;null;null;Y;N;N; 
790696;A Java Framework for Smart Contracts;80;Spoto, Fausto;This article defines a framework for programming, in Java, smart contracts over blockchain. The framework consists of a restricted runtime and of an instrumentation procedure for classes that need to be persisted to blockchain, for payable contract methods and for gas metering. This instrumentation abstracts away any difference between storage and memory data location, which is at the origin of tricky semantical issues and bugs in Solidity. Moreover, this framework allows one to leverage, in a transparent way, existing expertise and tools from the Java world, in order to build smart contracts in a simple and comfortable way. The resulting contracts are strongly-typed and work over a shared storage, that allows simple intercontract communication. This makes it easy to install libraries or microservices in blockchain.;ACCEPTED;ACCEPTED;LOW;11;2020;"International Conference on Financial Cryptography and Data Security
FC 2019: Financial Cryptography and Data Security ";;Conference paper;"Dudoso: This article defines a framework for programming, in Java, smart contracts over blockchain.

We could think of the framework as a DSL that is implemented as a Java Extension.
";https://link--springer--com.us.debiblio.com/chapter/10.1007/978-3-030-43725-1_10;11599;122--137;https://doi.org/10.1007/978-3-030-43725-1_10;978-3-030-43725-1;05/26/2020;;N;N;N;N;N;Y;N;N;N;;Takamaka;Y;N;N;N;N;Y;The implementation of the framework requires the blockchain to be equippedwith primitives to serialise and deserialise storage objects (Sect.3). Hence, itcannot be immediately implemented on the Ethereum blockchain. Our projectcontinues now with the implementation of a blockchain that provides such prim-itives and with the actual evaluation of the framework.;N;Y;null;Department of Computer Science, Universit`a di Verona, Verona, Italy;Y;N;null;null;Y;N;N; 
790721;Modeling of Smart Contracts in Blockchain Solution for Renewable Energy Grid;80;G{\'o}rski, Tomaszand Bednarski, Jakub;The paper presents the manner of smart contracts' modeling in blockchain solution. The authors illustrate the modeling approach using the example of a renewable energy system. The paper proposes extension of Unified Modeling Language (UML) in form of UML Profile for Smart Contracts, appropriate for smart contract design. Moreover, the standard smart contract design and implementation method, in Corda environment, has been made more flexible. The authors present static aspect of newly designed Smart Contract Design Pattern.;ACCEPTED;ACCEPTED;LOW;23;2020;"International Conference on Computer Aided Systems Theory
EUROCAST 2019: Computer Aided Systems Theory – EUROCAST 2019 ";"Software architecture;Blockchain;Smart contract;Distributed ledger;Architectural views model 1+5";Conference paper;It presents a UML profile for modeling UML contracts.;https://doi.org/10.1007/978-3-030-45093-9_61;12013;507--514;https://doi.org/10.1007/978-3-030-45093-9_61;978-3-030-45093-9;05/26/2020;;N;N;N;N;N;Y;N;N;N;;UML Profile;N;Y;N;N;Y;N;It is supposed to be agnostic, but they are focused on CORDA;N;Y;Our aim is to provide flexible and easy to extend manner of modeling and implementation of smart contracts in such solutions. The article is focused on this very aim;Institute of Naval Weapons and Computer Science,Polish Naval Academy, Gdynia, Poland;N;Y;null;Renewable Energy Grid;Y;N;N; 
790727;Logic-Based Smart Contracts;80;Stancu, Adrianaand Dragan, Mihaita;With the increasing popularity and diversity of Blockchain systems, smart contracts were introduced as a necessity to automatically execute certain operation depending on the occurred events. The programming languages used in defining the triggering events and their consequent actions depends on the Blockchain implementation. In this article, we will investigate the advantages and suitable scenarios for using a formal approach in defining smart contracts. We will use a particular python implementation of a Blockchain and add the interface with a Prolog component for defining and querying smart contracts.;ACCEPTED;ACCEPTED;LOW;17;2020;Trends and Innovations in Information Systems and Technologies;"Smart contract; Logic programming; Distributed database";Conference paper;"Related work??  In this article, we will investigate the advantages and suitable scenarios for using a formal approach in defining smart contracts.
It seems that it could be accepted, but I cannot download the paper";;;387--394;https://doi.org/10.1007/978-3-030-45688-7_40 ;978-3-030-45688-7;05/26/2020;;N;N;N;N;N;Y;N;N;N;;null;Y;N;N;N;Y;N;null;Y;N;null;null;Y;N;null;null;Y;N;N; 
790732;Smart Contract Locator (SCL) and Smart Contract Description Language (SCDL);80;"Lamparelli, Andreaand Falazi, Ghareeband Breitenb{\""u}cher, Uweand Daniel, Florianand Leymann, Frank";Today's blockchain technologies focus mostly on isolated, proprietary technologies, yet there are application scenarios that ask for interoperability, e.g., among blockchains themselves or with external applications. This paper proposes the Smart Contract Locator (SCL) for the unambiguous identification of smart contracts over the Internet and across blockchains, and the Smart Contract Description Language (SCDL) for the abstract description of the external interface of smart contracts. The paper derives a unified metamodel for blockchain smart contract description and equips it with a concrete, JSON-based description language for smart contract search and discovery. The goal of the proposal is to foster smart contract reuse both inside blockchains and through the integration of smart contracts inside enterprise applications. The idea is inspired by the Service-Oriented Architecture (SOA) and aims to provide a high-level, cross-blockchain interoperability layer.;ACCEPTED;ACCEPTED;LOW;45;2020;Service-Oriented Computing -- ICSOC 2019 Workshops;"Blockchain;Smart contracts;Description·SCDL;SCL";Workshop paper;It is the same language than the one introduced in 802068. I have doubts with both of them. As a consequence, or both accepted or both rejected.;https://doi.org/10.1007/978-3-030-45989-5_16;12019;195--210;https://doi.org/10.1007/978-3-030-45989-5_16;978-3-030-45989-5;05/26/2020;;N;N;N;N;N;Y;N;N;N;;Smart Contract Description Language (SCDL);Y;N;N;N;Y;N;null;Y;N;null;null;Y;N;null;null;Y;N;N; 
790780;Aplos: Smart Contracts Made Smart;80;Bandara, Erangaand Ng, Wee Keongand Ranasinghe, Nalinand De Zoysa, Kasun;Smart contract is a programming interface to interact with the underlying blockchain storage models. It is a database abstraction layer for blockchain. Existing smart contract platforms follow the imperative style programming model since states are shared. As a result, there is no concurrency control mechanism when executing transactions, resulting in considerable latency and hindering scalability. To address performance and scalability issues of existing smart contract platforms, we design a new smart contract platform called ``Aplos'' based on the Scala functional programming language and Akka actors. In Aplos, all blockchain-related smart contract functions are implemented with Akka actors. The Aplos platform is built over Mystiko---a highly scalable blockchain storage for big data. Mystiko supports concurrent transactions, high transaction throughput, data analytics and machine learning. With Aplos smart contracts over Mystiko, we have developed a blockchain for highly scalable storage that aligns with big data requirements.;ACCEPTED;ACCEPTED;LOW;26;2020;"International Conference on Blockchain and Trustworthy Systems
BlockSys 2019: Blockchain and Trustworthy Systems ";"Blockchain;Smart contract; Functional programming;Actor model; Big data; Scala; Akka ";Conference paper; To address performanceand scalability issues of existing smart contract platforms, we design anew smart contract platform called “Aplos” based on the Scala func-tional programming language and Akka actors. In Aplos, all blockchain-related smart contract functions are implemented with Akka actors. TheAplos platform is built over Mystiko—a highly scalable blockchain storagefor big data.;https://doi.org/10.1007/978-981-15-2777-7_35;;431--445;https://doi.org/10.1007/978-981-15-2777-7_35;978-981-15-2777-7;05/26/2020;;N;N;N;N;N;Y;N;N;N;;Aplos platform, SM written in Scala;Y;N;N;N;Y;N;Mystiko;Y;N;null;School of Computer Science and Engineering,Nanyang Technological University, Singapore, Singapore Colombo School of Computing, Colombo, Sri Lanka;Y;N;null;null;Y;N;N; 
790884;NEO Blockchain and Smart Contracts;80;Elrom, Elad;In Chapter 1, I covered the NEO proof of stake (PoS) blockchain consensus mechanism. In Chapter 2, you created a NEO bookkeeping node on AWS Ubuntu and learned how to request a consensus authority certificate and get elected as a bookkeeper.;ACCEPTED;ACCEPTED;LOW;5;2019;The Blockchain Developer: A Practical Guide for Designing, Implementing, Publishing, Testing, and Securing Distributed Blockchain-based Projects;;Book Chapter;"Dudoso: I think should be rejected but Im not sure 
It defines c almohadilla to write smart contracts for neo.";https://doi.org/10.1007/978-1-4842-4847-8_7;;257--298;10.1007/978-1-4842-4847-8_7;978-1-4842-4847-8;05/26/2020;;N;N;N;N;N;Y;N;N;N;;c almohadilla;Y;N;N;N;Y;N;Neo;Y;N;null;null;Y;N;null;null;Y;N;N; 
790886;EOS.IO Wallets and Smart Contracts;80;Elrom, Elad;"In Chapter 2, I introduced EOS.IO when I covered bitcoin, altcoins, and different consensus mechanisms. Specifically, I covered how EOS.IO is an example of altcoins that turn into tokens; you created an EOS block producer and were able to create a full node capable of mining EOS tokens. Ethereum was the beginning of your blockchain smart contract development, and you learned to use the Solidity language to write smart contracts and dapps. EOS.IO has created a more robust architecture than Ethereum for smart contract and dapp development.";ACCEPTED;ACCEPTED;LOW;17;2019;The Blockchain Developer: A Practical Guide for Designing, Implementing, Publishing, Testing, and Securing Distributed Blockchain-based Projects;;Book Chapter;"Dudoso
Aceptado.
It presents Smart contracts written in C++ for EOS.IO.";https://doi.org/10.1007/978-1-4842-4847-8_6;;213--256;10.1007/978-1-4842-4847-8_6;978-1-4842-4847-8;05/26/2020;;N;N;N;N;N;Y;N;N;N;;C++;Y;N;N;N;Y;N;EOS.IO;Y;N;null;null;Y;N;null;null;Y;N;N; 
790958;On the Prediction of Smart Contracts' Behaviours;80;Laneve, Cosimoand Coen, Claudio Sacerdotiand Veschetti, Adele;Smart contracts are pieces of software stored on the blockchain that control the transfer of assets between parties under certain conditions. In this paper we analyze the bahaviour of smart contracts and the interaction with external actors in order to maximize objective functions. We define a core language of programs with a minimal set of smart contract primitives and we describe the whole system as a parallel composition of smart contracts and users. We therefore express the system behaviour as a first logic formula in Presburger arithmetics and study the maximum profit for each actor by solving arithmetic constraints.;ACCEPTED;ACCEPTED;LOW;20;2019;From Software Engineering to Formal Methods and Tools, and Back: Essays Dedicated to Stefania Gnesi on the Occasion of Her 65th Birthday;;Book Chapter;"In this paper we have introduced a unified calculus for modelling smart contracts and users, which are the primary actors of decentralized applications.
 I have certain doublts";https://doi.org/10.1007/978-3-030-30985-5_23;;397--415;10.1007/978-3-030-30985-5_23;978-3-030-30985-5;05/26/2020;;N;N;N;N;N;Y;N;N;N;;In this paper we have introduced a unified calculus for modelling smart contracts and users, which are the primary actors of decentralized applications.;Y;N;N;N;Y;N;null;Y;N;SC Behaviour;Department of Computer Science and Engineering,University of Bologna – INRIA Focus, Bologna, Italy;Y;N;null;null;N;Y;N; 
791140;Secure Smart Contract Generation Based on Petri Nets;80;Zupan, Nejcand Kasinathan, Prabhakaranand Cuellar, Jorgeand Sauer, Markus;Existing blockchain and smart contract development ecosystems do not support to design, develop, and verify secure smart contracts before deploying them. Recent attacks (see DAO hack [5]) on insecure smart contracts have caused a lot of financial loss---to avoid such issues in the future, we need better methods for creating secure smart contracts before deploying them in a blockchain. In this chapter, we present a method and a prototype tool to generate secure smart contracts based on Petri Nets. Our method allows to design and generate a secure smart contract template that can be deployed on a supported blockchain platform (e.g. Ethereum) with very little additional effort. One of the main advantages that our method brings into the smart contract development ecosystem is introducing a formal way to visually model, simulate, and verify business logic/workflows prior to the smart contract code generation. Modeling the smart contracts via Petri Nets helps the developers to minimize the logical errors---by verifying certain Petri Net properties such as deadlocks---during the modeling stage itself. Furthermore, our approach presents a technology-independent way to import and export the modeled use-case logic which can be translated into different smart contract language later.;ACCEPTED;ACCEPTED;LOW;38;2020;Blockchain Technology for Industry 4.0: Secure, Decentralized, Distributed and Trusted Industry Environment;"Smart contracts; Blockchain; Modeling; Petri Nets; Security ";Book Chapter;PNML (Petri Net Modeling Language). They transform the SC modelled with the PNML to a Smart-Contract Translation Engine;https://doi.org/10.1007/978-981-15-1137-0_4;;73--98;10.1007/978-981-15-1137-0_4;978-981-15-1137-0;05/26/2020;;N;N;N;N;N;Y;N;N;N;;PNML (Petri Net Modeling Language);Y;N;N;N;Y;N;Technology agnostic, although the current implementation is translated into Solidity;Y;N;null;Siemens AG and University of passau;N;Y;null;null;N;Y;N; 
791231;ConCert: A Smart Contract Certification Framework in Coq;86;Annenkov, Danil and Nielsen, Jakob Botsch and Spitters, Bas;We present a new way of embedding functional languages into the Coq proof assistant by using meta-programming. This allows us to develop the meta-theory of the language using the deep embedding and provides a convenient way for reasoning about concrete programs using the shallow embedding. We connect the deep and the shallow embeddings by a soundness theorem. As an instance of our approach, we develop an embedding of a core smart contract language into Coq and verify several important properties of a crowdfunding contract based on a previous formalisation of smart contract execution in blockchains.;ACCEPTED;ACCEPTED;LOW;9;2020;Proceedings of the 9th ACM SIGPLAN International Conference on Certified Programs and Proofs;Coq, smart contracts, blockchain, certified programming, software correctness, functional programming languages;Conference paper;"Dudoso
I am not sure. Defines a SC language, but as a proof of concept of their approach.
Good for related
";https://doi.org/10.1145/3372885.3373829;;215-228;10.1145/3372885.3373829;9781450370974;05/27/2020;;N;Y;N;N;N;N;N;N;N;;null;Y;N;N;N;Y;N;null;Y;N;null;null;Y;N;null;null;Y;N;N; 
791335;Smart Contracts as Authorized Production Rules;87;Lippmeier, Ben and Robinson, Amos and Muys, Andrae;Rainfall is a smart contract programming model that allows mutually distrusting parties to manage assets on a distributed ledger. The model consists of a tuple space of authorized facts, and a set of production rules. Rules match on authorized facts, gaining their authority, and produce new facts with a subset of the gained authority. Rainfall allows assets such as crypto currencies to be defined in user code, rather than being baked directly into the ledger framework. Our authorization model also provides a natural privacy model, where not all rules or facts need to be revealed to all parties.;ACCEPTED;ACCEPTED;LOW;5;2019;Proceedings of the 21st International Symposium on Principles and Practice of Programming Languages 2019;;Conference paper;"Dudoso: ""Rainfall is a smart contract programming model that allows mu-tually distrusting parties to manage assets on a distributed ledger.The model consists of a tuple space of authorized facts, and a set ofproduction rules. Rules match on....""

It is a rule-based language.";https://doi.org/10.1145/3354166.3354179;;;10.1145/3354166.3354179;9781450372497;05/27/2020;;N;Y;N;N;N;N;N;N;N;;null;Y;N;N;N;Y;N;null;Y;N;null;null;Y;N;null;null;Y;N;N; 
802051;Porthos: Macroprogramming Blockchain Systems;90;A. Mizzi and J. Ellul and G. J. Pace;The rise of blockchain technology has paved the way for an increasing number of blockchain systems, each having different characteristics. The need for distributed applications that span across multiple blockchain systems is increasing. However, it is currently not possible to write a single-description smart contract which can be compiled to span across multiple blockchain systems. In this paper we present PORTHOS, a macroprogramming framework and domain specific language for writing commitment-based smart contracts that span multiple blockchain systems. The language allows programmers to write smart contracts at a higher level of abstraction by composing together contract blocks, without the need to specify how logic should be split across different blockchain instances. A runtime framework, including both on-chain and off-chain functionality, harmonises the features of different blockchain systems as well as enables communication across the smart contracts. A proof of concept, built on the Ethereum and Hyperledger Fabric blockchain systems and extendible to other systems, illustrates the technique and framework. We also show how the PORTHOS language is expressive enough to define a variety of applications.;ACCEPTED;ACCEPTED;LOW;35;2019;2019 10th IFIP International Conference on New Technologies, Mobility and Security (NTMS);"contracts;financial data processing;formal specification;high level languages;program compilers;specification languages;macroprogramming framework;domain specific language;commitment-based smart contracts;contract blocks;PORTHOS language;macroprogramming blockchain systems;blockchain technology;single-description smart contract;Ethereum system;Hyperledger Fabric blockchain systems;Blockchain;Smart contracts;DSL;Interoperability;Relays;Runtime;macroprogramming;blockchain;DSL";Conference paper;It shows a DSL. Definitely Yes. It is a smart-contract language.;https://ieeexplore--ieee--org.us.debiblio.com/stamp/stamp.jsp?tp=&arnumber=8763784;;1-5;10.1109/NTMS.2019.8763784;2157-4960;05/29/2020;;N;N;N;N;N;Y;N;N;N;;Porthos;Y;N;N;N;Y;N;null;Y;N;null;Department of Computer Science. University of Malta;Y;N;null;null;Y;N;N; 
802059;From Domain Specific Language to Code: Smart Contracts and the Application of Design Patterns;90;M. {Wohrer} and U. {Zdun};Smart contracts are self-executing computer programs that stipulate and enforce the negotiation and execution of (legal) contracts. Today, one of the most prominent smart contract ecosystems is Ethereum, a blockchain based distributed computing platform, that can be used to capture and express contract terms, for instance, in the platformâ€™s leading programming language, Solidity. Due to the conceptual discrepancy between legal contract terms and corresponding code, it is difficult to easily comprehend smart contracts and write them efficiently without errors. After all, blockchain-based contract execution, lacking programming abstractions, and constantly changing platform capabilities and security aspects, make writing smart contracts a difficult undertaking. To address these problems, this article proposes smart contract design patterns and their automated application, by means of code generation and the use of a domain-specific language.;ACCEPTED;ACCEPTED;LOW;33;2020;IEEE Software;"Smart contracts;Blockchain;DSL;Security;Law;Encoding";Journal Paper;"Definitely Yes.
Among other things, they propose Contract Modeling Language (CML)";https://ieeexplore--ieee--org.us.debiblio.com/stamp/stamp.jsp?tp=&arnumber=9089272;;0-0;10.1109/MS.2020.2993470;1937-4194;05/29/2020;;N;N;N;N;N;Y;N;N;N;;Contract Modeling Language (CML);N;Y;N;N;Y;N;Ethereum /Agnostic. It is supposed to be agnostic, but they say they have done code generation for Solidity.;Y;N;null;University of Vienna. Faculty of Computer Science.;Y;N;null;null;Y;N;N; 
802060;Semantic Smart Contracts for Blockchain-based Services in the Internet of Things;90;H. {Baqa} and N. B. {Truong} and N. {Crespi} and G. M. {Lee} and F. {le Gall};The emerging Blockchain (BC) and Distributed Ledger technologies have come to impact a variety of domains, from capital market sectors to digital asset management in the Internet of Things (IoT). As a result, more and more BC-based decentralized applications for numerous cross-domain services have been developed. These applications implement specialized decentralized computer programs called Smart Contracts (SCs) which are deployed into BC frameworks. Although these SCs are open ato public, it is challenging to discover and utilize such SCs for a wide range of usages from both systems and end-users because such SCs are already compiled in form of byte-codes without any associated meta-data. This motivates us to propose a solution called Semantic SC (SSC) which integrates RESTful semantic web technologies in SCs, deployed on the Ethereum Blockchain platform, for indexing, browsing and annotating such SCs. The solution also exposes the relevant distributed ledgers as Linked Data for enhancing the discovery capability. To achieve this goal, the OWL-S service ontology is extended by incorporating some domain specific terminologies, which are used in the development of the proposed SSCs. As a result, SSC can be utilized to enrich queries for a domain-specific terms across multiple distributed ledgers, which greatly increases the discovery capability of decentralized IoT applications and services. Contribution in standardization is also discussed. We believe that our research work takes the first steps towards connecting BC-based decentralized services with semantic web services in order to provide better IoT ecosystems.;ACCEPTED;ACCEPTED;LOW;14;2019;2019 IEEE 18th International Symposium on Network Computing and Applications (NCA);"contracts;cryptocurrencies;distributed databases;financial data processing;Internet of Things;knowledge representation languages;Linked Data;meta data;ontologies (artificial intelligence);query processing;semantic Web;Web services;digital asset management;decentralized computer programs;BC frameworks;byte-codes;meta-data;SSC;Linked Data;OWL-S service ontology;BC-based decentralized services;semantic Web services;IoT ecosystems;distributed ledger technologies;capital market sectors;RESTful semantic Web technologies;ethereum blockchain platform;semantic smart contracts;Internet of Things;queries;Blockchain;Distributed Ledger;Internet of Things;Semantic Indexing;Semantic Web;Smart Contract";Conference paper;"dudoso: To achieve this goal, the OWL-S service ontology is extended by incorporating some domain specific terminologies, which are used in the development of the p

I also have doubts, but I'm going to accepted it just in case. And then we will discuss it. 
Our solution (i.e., ”SSC”) is to represent the SC semanticsusing EthOn contract extension concepts and a business relatedvocabulary in order to facilitate integrity as well as fosteringresource  discovery. ";https://ieeexplore--ieee--org.us.debiblio.com/stamp/stamp.jsp?tp=&arnumber=8935016;;1-5;10.1109/NCA.2019.8935016;2643-7929;05/29/2020;;N;N;N;N;N;Y;N;N;N;;null;Y;N;N;N;Y;N;null;Y;N;null;null;Y;N;null;null;Y;N;N; 
802068;Unified Integration of Smart Contracts Through Service Orientation;90;G. {Falazi} and A. {Lamparelli} and U. {Breitenbuecher} and F. {Daniel} and F. {Leymann};This article introduces the reader to a set of technologies that lay the foundation for a service-oriented integration of smart contracts into generic software applications, such as business processes or enterprise applications. Using a typical supply chain scenario, the article showcases the use of the Smart Contract Description Language (SCDL) to describe the external interfaces of smart contracts, the Smart Contract Locator (SCL) to locate contracts deployed inside blockchain networks, and the Smart Contract Invocation Protocol (SCIP) to interact with them from the outside of the blockchain networks. The three specifications abstract away from blockchain specifics, provide developers with a unified view over multiple, heterogeneous blockchain technologies, and are supported by a reference implementation of a SCIP endpoint able to automatically turn abstract interactions into blockchain-specific ones.;ACCEPTED;ACCEPTED;LOW;23;2020;IEEE Software;"Contracts;Supply chains;Logic gates;Software;Protocols;Fish";Journal Paper;"SCDL (Smart Contract Description Language)
is a language for describing smart contract interfaces in the context of a Web Oriented Service Scenario.
";;;0-0;10.1109/MS.2020.2994040;1937-4194;05/29/2020;;N;N;N;N;N;Y;N;N;N;;SCDL;N;Y;N;N;Y;N;null;Y;N;null;null;Y;N;null;null;Y;N;N; 
856703;Towards human-readable smart contracts;98;"Franz, F. ; Fertig, T. ; Schutz, A.E. ; Vu, H.";In the late 90s the author Ian Grigg defined that smart contracts have to be human-readable like paper contracts while remaining processible by computer programs. The Ethereum Foundation has created a new programming language Solidity that can be used to implement smart contracts. However, the contracts are neither easy to implement nor easy-to-use by the common user. In order to enable users without programming skills to take advantage of the new technology, we propose a generator for smart contracts. Our prototype uses a configuration wizard to determine the requirements of the generated contract. Based on the official ERC Standards of the Ethereum community we will implement a prototype that can configure and generate customized contracts. Moreover, we are covering the challenges that we have to face in order to support automated test case generation and automated deployment processes. Â© 2019 IEEE.;ACCEPTED;ACCEPTED;LOW;17;2019;2019 IEEE International Conference on Blockchain and Cryptocurrency (ICBC);"Blockchain;Chromium compounds;Ethereum;Solidity;Automated test case generation;Contracts;Deployment process;Human-readable;Programming skills";Conference paper;"Dudoso

I have doubts, but I accepted just in case. We need to discuss it.
"" In order to enable users without programmingskills  to  take  advantage  of  the  new  technology,  we  propose  agenerator for smart contracts. Our prototype uses a configurationwizard to determine the requirements of the generated contract.Based on the official ERC Standards of the Ethereum communitywe  will  implement  a  prototype  that  can  configure  and  generatecustomized  contracts.  """;https://ieeexplore--ieee--org.us.debiblio.com/document/8751309;;;10.1109/BLOC.2019.8751309;978-1-72811-328-9;;;N;N;N;N;N;Y;N;N;N;;null;Y;N;N;N;Y;N;null;Y;N;null;null;Y;N;null;null;Y;N;N; 
856705;Supporting reuse of smart contracts through service orientation and assisted development;98;"Guida, L. ; Daniel, F. ; Kupper A., Xu J., Park Y., Ruppel P., Schulte S.";This paper focuses on two of the key challenges a developer encounters when reusing smart contracts: finding actionable information about existing smart contracts (descriptors) and writing the necessary integration logic to invoke selected contracts and implement missing functions. As for the former issue, the paper proposes a smart contract description format that allows the developer to search for publicly available contracts, understand which features a contract exposes and how to invoke them, according to a service-oriented approach. For the latter, the paper implements a simple, model-driven development environment consisting in a visual programming editor that provides a set of modeling constructs encoding specific, reuse-oriented code patterns. The approach is implemented and demonstrated in the context of the blockchain platform Ethereum and its programming language Solidity. The results obtained show that the proposed approach can be beneficial in the development of composite smart contracts and generic blockchain applications. Â© 2019 IEEE.;ACCEPTED;ACCEPTED;LOW;20;2019;2019 IEEE International Conference on Decentralized Applications and Infrastructures (DAPPCON);"Blockchain;Computer programming;Service orientation;Code-patterns;Descriptors;Information services;Model driven development;Modeling construct;Service-oriented approaches;Visual editors;Visual programming";Conference paper;"Dudoso: ""the paper proposes a smart contract description format that allows the developer to search for publicly available contracts, understand which features a contract exposes and how to invoke them""";;;; 10.1109/DAPPCON.2019.00017;978-1-72811-264-0;;;N;N;N;N;N;Y;N;N;N;;null;Y;N;N;N;Y;N;null;Y;N;null;null;Y;N;null;null;Y;N;N; 
856715;Modularizing cross-cutting concerns with aspect-oriented extensions for solidity;98;"Hung, C.-C. ; Chen, K. ; Liao, C.-F. ; Kupper A., Xu J., Park Y., Ruppel P., Schulte S.";Over the past few years, blockchain technology has attracted much attention. The smart contract is a computer program that implements and executes transactions and business logic on the blockchain. Unlike traditional general-purpose programming languages, the modularization techniques of programming languages for the smart contracts are still immature. Specifically, a suitable modularization mechanism for cross-cutting concerns is still not available. From a software engineering perspective, the modularization of cross-cutting concerns is a fundamental issue that can dramatically affect the contracts' maintainability and readability. As a result, reducing the redundant cross-cutting logic is still a challenging task. This paper proposes a practically viable approach that supports Aspect-Oriented Programming (AOP) for smart contract development on Ethereum-based blockchains. We suggest a set of extension to Solidity, a programming language that runs on the Ethereum-based blockchains, that facilitates AOP semantics and behaviors. As a proof of concept, we also realize the weaving module for the extension. The feasibility of the proposed approach is demonstrated by a case study. Â© 2019 IEEE.;ACCEPTED;ACCEPTED;LOW;20;2019;2019 IEEE International Conference on Decentralized Applications and Infrastructures (DAPPCON);"Blockchain;Ethereum;Solidity;Software engineering;Semantics;Aspect oriented programming;Aspect-Oriented Programming (AOP);Computer circuits;Cross-cutting concerns;Engineering perspective;General-purpose programming language;Modular construction;Modularization techniques;Modularizations;Proof of concept";Conference paper;It proposes an AOP extension to solidity;https://ieeexplore--ieee--org.us.debiblio.com/document/8783078;;; 10.1109/DAPPCON.2019.00033;978-1-72811-264-0;;;N;Y;N;N;N;N;N;N;N;;null;Y;N;N;N;Y;N;null;Y;N;null;null;Y;N;null;null;Y;N;N; 
856727;SATOS: Storage agnostic tokens over opaque and substructural types;98;"Knecht, M. ; Stiller, B.";Public blockchains in support of Smart Contracts (SC), like Ethereum enable everyone to represent scarce, valuable resources (like cryptocurrencies) as so-called tokens. Token issuing and management was the first blockchain use case. However, programming languages and runtime systems used in the current blockchains for their SCs lack a secure and straightforward way to implement and handle tokens. The unnecessary complexity in doing so can lead to erroneous implementation of tokens and applications built on top of these, including the loss or theft of tokens as it happened. The most known attack was 'TheDAO' attack which led to the 'loss' of tokens, valued at that time at approximately 60 M US Dollar. A better and secure token representation directly embedded into a SC runtime and SC programming language could prevent loss of tokens. Thus this paper presents an approach including parts of a programming language using it. The core of the model is to use opaque and substructural data types together with an onchain soundness checker to generically represent tokens securely as values similar to integers and booleans. Such opaque data types enforce that only a designated piece of code can create values of that type. The substructural data types allow arbitrary values to express scarcity by preventing the duplication and elimination of values. The on-chain soundness checker ensures that the deployed code does not violate guarantees given by the type system, which includes opaque and substructural data types. Â© 2019 IEEE.;ACCEPTED;ACCEPTED;LOW;14;2019;2019 Crypto Valley Conference on Blockchain Technology (CVCBT);"Blockchain;Digital storage;Computer programming languages;Type systems;Arbitrary values;Data type;Runtime systems;Runtimes;US dollar";Conference paper;"Dudoso: "" Thus this paper presents an approach including parts of a programming language using it. The core of the model is to use opaque and substructural data typ...""

This  paper  defines,  a  new  model,  termed  SATOS  forrepresenting  and  managing  tokens  on  a  blockchain  as  first-class  values....
The programming language called Mandala,  currently  under  development,  is  used  to  provideexamples visualizing the major concepts.";https://ieeexplore--ieee--org.us.debiblio.com/document/8787554;;;10.1109/CVCBT.2019.000-4;978-1-72813-669-1;;;N;N;N;N;N;N;N;N;N;;Mandala;Y;N;N;N;Y;N;null;Y;N;null;null;Y;N;null;null;Y;N;N; 
856761;Zkay: Specifying and enforcing data privacy in smart contracts;98;"Steffen, S. ; Melchior, N. ; Bichsel, B. ; Tsankov, P. ; Gersbach, M. ; Vechev, M.";Privacy concerns of smart contracts are a major roadblock preventing their wider adoption. A promising approach to protect private data is hiding it with cryptographic primitives and then enforcing correctness of state updates by Non-Interactive Zero-Knowledge (NIZK) proofs. Unfortunately, NIZK statements are less expressive than smart contracts, forcing developers to keep some functionality in the contract. This results in scattered logic, split across contract code and NIZK statements, with unclear privacy guarantees. To address these problems, we present the zkay language, which introduces privacy types defining owners of private values. zkay contracts are statically type checked to (i) ensure they are realizable using NIZK proofs and (ii) prevent unintended information leaks. Moreover, the logic of zkay contracts is easy to follow by just ignoring privacy types. To enforce zkay contracts, we automatically transform them into contracts equivalent in terms of privacy and functionality, yet executable on public blockchains. We evaluated our approach on a proof-of-concept implementation generating Solidity contracts and implemented 10 interesting example contracts in zkay. Our results indicate that zkay is practical: On-chain cost for executing the transformed contracts is around 1M gas per transaction ( 0.50US$) and off-chain cost is moderate. Â© 2019 Copyright held by the owner/author(s).;ACCEPTED;ACCEPTED;LOW;16;2019;Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security;"Blockchain;Data privacy;Computer programming languages;Zero knowledge proof;Computer circuits;Proof of concept;Cryptographic primitives;Interactive computer systems;Non-interactive zero knowledge;Privacy concerns;Private data";Conference paper;Privacy concerns of smart contracts are a major roadblock prevent-ing their wider adoption. ...To address these problems, we present thezkaylanguage, whichintroduces privacy types defining owners of private values.;https://dl.acm.org/doi/abs/10.1145/3319535.3363222;; 1759–1776;ttps://doi.org/10.1145/3319535.3363222;978-1-4503-6747-9;;;N;N;N;N;N;Y;N;N;N;;null;Y;N;N;N;Y;N;null;Y;N;null;null;Y;N;null;null;Y;N;N; 
1157855;Deon Digital CSL Language GuideDocumentation;113;Deon Digital;"This is an introduction to and overview of Deon Digital’s Contract Specification Language (CSL). As the name
implies, CSL is used to specify contracts – details such as the particular executio n method or how participating
parties are authenticated/validated are deliberately not included in the CSL specification.";ACCEPTED;ACCEPTED;LOW;5;2019;;;WebSite;==> it seems it could be executed on Hyperledger Fabric;https://deondigital.com/docs/v0.30.0/cslguide.pdf;;;;;06/21/2020;;N;N;N;N;N;Y;N;N;N;;null;Y;N;N;N;Y;N;null;Y;N;null;null;Y;N;null;null;Y;N;N; 
1157856;Resource-Aware Session Types for Digital Contracts;113;Ankush Das andStephanie Balzer andJan Hoffmann andFrank Pfenning;"Programming digital contracts comes with unique challenges, which include (i) expressing and enforcing
protocols of interaction, (ii) controlling resource usage, and (iii) preventing the duplication or deletion of a
contract’s assets. This article presents the design and type-theoretic foundation of Nomos, a programming
language for digital contracts that addresses these challenges. To express and enforce protocols, Nomos is
based on shared binary session types. To control resource usage, Nomos employs automatic amortized resource
analysis. To prevent the duplication or deletion of assets, Nomos uses a linear type system. A monad integrates the effectful session-typed language with a general-purpose functional language. Nomos’ prototype
implementation features linear-time type checking and efficient type reconstruction that includes automatic
inference of resource bounds via off-the-shelf linear optimization. The effectiveness ofthe language is evaluated
with case studies about implementing common smart contracts such as auctions, elections, and currencies.
Nomos is completely formalized, including the type system, a cost semantics, and a transactional semantics to
instantiate Nomos contracts on a blockchain. The type soundness proof ensures that protocols are followed
at run-time and that types establish sound upper bounds on the resource consumption, ruling out re-entrancy
and out-of-gas vulnerabilities, respectively.";ACCEPTED;ACCEPTED;LOW;0;2019;CoRR;;arXiv;It seems that presents the Nomos SC language.;http://arxiv.org/abs/1902.06056;abs/1902.06056;;;;06/21/2020;;N;N;N;N;N;Y;N;N;N;;null;Y;N;N;N;Y;N;null;Y;N;null;null;Y;N;null;null;Y;N;N; 
1157868;What is Archetype;115;Benoit Rognier;;ACCEPTED;ACCEPTED;LOW;0;2019;;;WebSite;"It is a DSL to develop smart contracts for Tezos
See also: https://medium.com/coinmonks/archetype-a-dsl-for-tezos-6f55c92d1035";https://docs.archetype-lang.org/;;;;;06/22/2020;;N;N;N;N;N;Y;N;N;N;;null;Y;N;N;N;Y;N;null;Y;N;null;null;Y;N;null;null;Y;N;N; 
1157869;Domain Specific Language for Smart Contract Development;115;"Maximilian W{\""o}hrer and Uwe Zdun";The notion to digitally articulate, execute, and enforce agreements with smart contracts has become a feasible reality today. Smart contracts have the potential to vastly improve the efficiency and security of traditional contracts through their self-executing autonomy. To realize smart contracts several blockchain-based ecosystems exist. Today a prominent representative is Ethereum. Its programming language Solidity is used to capture and express contractual clauses in the form of code. However, due to the conceptual discrepancy between contractual clauses and corresponding code, it is hard for domain stakeholders to easily understand contracts, and for developers to write code efficiently without errors. Our research addresses these issues by the design and study of a domain-specific smart contract language based on higher level of abstraction that can be automatically transformed to an implementation. In particular, we propose a clause grammar close to natural language, helpful coding abstractions, and the automatic integration of commonly occurring design patterns during code generation. Through these measures, our approach can reduce the design complexity leading to an increased comprehensibility and reduced error susceptibility. Several implementations of exemplary smart contract scenarios, mostly taken from the Solidity documentation, are used to demonstrate the applicability of our approach.;ACCEPTED;ACCEPTED;LOW;34;2020;IEEE International Conference on Blockchain and Cryptocurrency;;Conference paper;;http://eprints.cs.univie.ac.at/6341/;;;;;06/22/2020;;N;N;N;N;N;Y;N;N;N;;null;Y;N;N;N;Y;N;null;Y;N;null;null;Y;N;null;null;Y;N;N; 
1182291;RIDE: a Smart Contract Language for Waves;121;A. Begicheva,I. Smagin;The Waves Platform is a global public blockchain platform, providingfunctionality for implementing the most-needed scenarios for an accountand token control.  In this paper, we present our vision for Waves smartcontracts  as  a  two-level  mechanism  with  a  more  detailed  description  ofRIDE – the first-level language for smart contracts.RIDE has smart accounts and smart assets for embed the calculationsystem.   This  level  has  a  simple-syntax  functional  language  for  script-ing  with  pre-calculated  complexity  due  to  Turing-incompleteness.   Wedescribe  the  concept  of  RIDE  and  implementation  of  its  structure  andcompilation process.;ACCEPTED;ACCEPTED;LOW;5;2018;;;White Paper;"It comes from [7] (2018) Waves blockchain. Accessed: 2019-03-20. [Online]. Available:
https://wavesplatform.com/products-blockchain

==> it is a new blockchain, the language for SC seems to be Ride

https://medium.com/wavesprotocol/what-are-smart-contracts-and-how-to-use-them-in-your-app-a1c0d62d1a5
";https://wavesprotocol.org/files/docs/white_paper_waves_smart_contracts.pdf?cache=b;;;;;06/23/2020;;N;N;N;N;N;Y;N;N;N;;null;Y;N;N;N;Y;N;null;Y;N;null;null;Y;N;null;null;Y;N;N; 
